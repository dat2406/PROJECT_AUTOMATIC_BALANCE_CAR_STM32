
PROJECT_XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006498  08006498  0000806c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006498  08006498  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006498  08006498  00007498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800649c  0800649c  0000749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080064a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000006c  0800650c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800650c  00008314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3a7  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  0001743c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00019578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c59  00000000  00000000  0001a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e95  00000000  00000000  0001b169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f21  00000000  00000000  00033ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f50c  00000000  00000000  00045f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d542b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  000d5470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000da124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080063d8 	.word	0x080063d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080063d8 	.word	0x080063d8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Kalman_Init>:
  float bias;
  float rate;
  float P[2][2];
} Kalman_t;

static inline void Kalman_Init(Kalman_t *k){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  k->Q_angle   = 0.005f;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a10      	ldr	r2, [pc, #64]	@ (800078c <Kalman_Init+0x4c>)
 800074c:	601a      	str	r2, [r3, #0]
  k->Q_bias    = 0.002f;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <Kalman_Init+0x50>)
 8000752:	605a      	str	r2, [r3, #4]
  k->R_measure = 0.03f;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <Kalman_Init+0x54>)
 8000758:	609a      	str	r2, [r3, #8]
  k->bias      = 0.0f;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  k->P[0][0] = k->P[1][1] = k->P[0][1] = k->P[1][0] = 0.0f;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a1a      	ldr	r2, [r3, #32]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	61da      	str	r2, [r3, #28]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	625a      	str	r2, [r3, #36]	@ 0x24
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	619a      	str	r2, [r3, #24]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	3ba3d70a 	.word	0x3ba3d70a
 8000790:	3b03126f 	.word	0x3b03126f
 8000794:	3cf5c28f 	.word	0x3cf5c28f

08000798 <Kalman_GetAngle>:

static inline float Kalman_GetAngle(Kalman_t *k, float newAngle,
                                    float newRate, float dt){
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b08b      	sub	sp, #44	@ 0x2c
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  /* Predict */
  k->rate  = newRate - k->bias;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fcd1 	bl	8000154 <__aeabi_fsub>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	615a      	str	r2, [r3, #20]
  k->angle += dt * k->rate;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	68dc      	ldr	r4, [r3, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	6839      	ldr	r1, [r7, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fdcf 	bl	8000368 <__aeabi_fmul>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4620      	mov	r0, r4
 80007d0:	f7ff fcc2 	bl	8000158 <__addsf3>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	60da      	str	r2, [r3, #12]
  k->P[0][0] += dt * (dt*k->P[1][1] - k->P[0][1] - k->P[1][0] + k->Q_angle);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	699c      	ldr	r4, [r3, #24]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fdbe 	bl	8000368 <__aeabi_fmul>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4610      	mov	r0, r2
 80007f8:	f7ff fcac 	bl	8000154 <__aeabi_fsub>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6a1b      	ldr	r3, [r3, #32]
 8000804:	4619      	mov	r1, r3
 8000806:	4610      	mov	r0, r2
 8000808:	f7ff fca4 	bl	8000154 <__aeabi_fsub>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4610      	mov	r0, r2
 8000818:	f7ff fc9e 	bl	8000158 <__addsf3>
 800081c:	4603      	mov	r3, r0
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fda1 	bl	8000368 <__aeabi_fmul>
 8000826:	4603      	mov	r3, r0
 8000828:	4619      	mov	r1, r3
 800082a:	4620      	mov	r0, r4
 800082c:	f7ff fc94 	bl	8000158 <__addsf3>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	619a      	str	r2, [r3, #24]
  k->P[0][1] -= dt * k->P[1][1];
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	69dc      	ldr	r4, [r3, #28]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fd90 	bl	8000368 <__aeabi_fmul>
 8000848:	4603      	mov	r3, r0
 800084a:	4619      	mov	r1, r3
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff fc81 	bl	8000154 <__aeabi_fsub>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	61da      	str	r2, [r3, #28]
  k->P[1][0] -= dt * k->P[1][1];
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6a1c      	ldr	r4, [r3, #32]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000862:	6839      	ldr	r1, [r7, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fd7f 	bl	8000368 <__aeabi_fmul>
 800086a:	4603      	mov	r3, r0
 800086c:	4619      	mov	r1, r3
 800086e:	4620      	mov	r0, r4
 8000870:	f7ff fc70 	bl	8000154 <__aeabi_fsub>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	621a      	str	r2, [r3, #32]
  k->P[1][1] += k->Q_bias * dt;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	6839      	ldr	r1, [r7, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fd6e 	bl	8000368 <__aeabi_fmul>
 800088c:	4603      	mov	r3, r0
 800088e:	4619      	mov	r1, r3
 8000890:	4620      	mov	r0, r4
 8000892:	f7ff fc61 	bl	8000158 <__addsf3>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Update */
  float S  = k->P[0][0] + k->R_measure;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff fc55 	bl	8000158 <__addsf3>
 80008ae:	4603      	mov	r3, r0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  float K0 = k->P[0][0] / S;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe09 	bl	80004d0 <__aeabi_fdiv>
 80008be:	4603      	mov	r3, r0
 80008c0:	623b      	str	r3, [r7, #32]
  float K1 = k->P[1][0] / S;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe01 	bl	80004d0 <__aeabi_fdiv>
 80008ce:	4603      	mov	r3, r0
 80008d0:	61fb      	str	r3, [r7, #28]
  float y  = newAngle - k->angle;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	4619      	mov	r1, r3
 80008d8:	68b8      	ldr	r0, [r7, #8]
 80008da:	f7ff fc3b 	bl	8000154 <__aeabi_fsub>
 80008de:	4603      	mov	r3, r0
 80008e0:	61bb      	str	r3, [r7, #24]
  k->angle += K0 * y;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	68dc      	ldr	r4, [r3, #12]
 80008e6:	69b9      	ldr	r1, [r7, #24]
 80008e8:	6a38      	ldr	r0, [r7, #32]
 80008ea:	f7ff fd3d 	bl	8000368 <__aeabi_fmul>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4619      	mov	r1, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f7ff fc30 	bl	8000158 <__addsf3>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	60da      	str	r2, [r3, #12]
  k->bias  += K1 * y;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	691c      	ldr	r4, [r3, #16]
 8000904:	69b9      	ldr	r1, [r7, #24]
 8000906:	69f8      	ldr	r0, [r7, #28]
 8000908:	f7ff fd2e 	bl	8000368 <__aeabi_fmul>
 800090c:	4603      	mov	r3, r0
 800090e:	4619      	mov	r1, r3
 8000910:	4620      	mov	r0, r4
 8000912:	f7ff fc21 	bl	8000158 <__addsf3>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	611a      	str	r2, [r3, #16]
  float P00_temp = k->P[0][0];
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	617b      	str	r3, [r7, #20]
  float P01_temp = k->P[0][1];
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	613b      	str	r3, [r7, #16]
  k->P[0][0] -= K0 * P00_temp;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	699c      	ldr	r4, [r3, #24]
 800092e:	6979      	ldr	r1, [r7, #20]
 8000930:	6a38      	ldr	r0, [r7, #32]
 8000932:	f7ff fd19 	bl	8000368 <__aeabi_fmul>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff fc0a 	bl	8000154 <__aeabi_fsub>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	619a      	str	r2, [r3, #24]
  k->P[0][1] -= K0 * P01_temp;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	69dc      	ldr	r4, [r3, #28]
 800094c:	6939      	ldr	r1, [r7, #16]
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fd0a 	bl	8000368 <__aeabi_fmul>
 8000954:	4603      	mov	r3, r0
 8000956:	4619      	mov	r1, r3
 8000958:	4620      	mov	r0, r4
 800095a:	f7ff fbfb 	bl	8000154 <__aeabi_fsub>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	61da      	str	r2, [r3, #28]
  k->P[1][0] -= K1 * P00_temp;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6a1c      	ldr	r4, [r3, #32]
 800096a:	6979      	ldr	r1, [r7, #20]
 800096c:	69f8      	ldr	r0, [r7, #28]
 800096e:	f7ff fcfb 	bl	8000368 <__aeabi_fmul>
 8000972:	4603      	mov	r3, r0
 8000974:	4619      	mov	r1, r3
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff fbec 	bl	8000154 <__aeabi_fsub>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	621a      	str	r2, [r3, #32]
  k->P[1][1] -= K1 * P01_temp;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8000988:	6939      	ldr	r1, [r7, #16]
 800098a:	69f8      	ldr	r0, [r7, #28]
 800098c:	f7ff fcec 	bl	8000368 <__aeabi_fmul>
 8000990:	4603      	mov	r3, r0
 8000992:	4619      	mov	r1, r3
 8000994:	4620      	mov	r0, r4
 8000996:	f7ff fbdd 	bl	8000154 <__aeabi_fsub>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return k->angle;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	68db      	ldr	r3, [r3, #12]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	372c      	adds	r7, #44	@ 0x2c
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
	...

080009b0 <micros>:
#ifndef _UTILS_H_
#define _UTILS_H_
#include "main.h"
#define CYCLES_PER_US (SystemCoreClock / 1000000UL)
#define DEG2RAD       0.0174532925f
static inline uint32_t micros(void){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / CYCLES_PER_US;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <micros+0x20>)
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <micros+0x24>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4906      	ldr	r1, [pc, #24]	@ (80009d8 <micros+0x28>)
 80009be:	fba1 1303 	umull	r1, r3, r1, r3
 80009c2:	0c9b      	lsrs	r3, r3, #18
 80009c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	e0001000 	.word	0xe0001000
 80009d4:	20000004 	.word	0x20000004
 80009d8:	431bde83 	.word	0x431bde83

080009dc <HAL_UART_RxCpltCallback>:
void setIndividualMotors(int16_t left_pwm, int16_t right_pwm);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <HAL_UART_RxCpltCallback+0x34>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10c      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0x2c>
        bt_cmd = bt_rx;
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_UART_RxCpltCallback+0x38>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_UART_RxCpltCallback+0x3c>)
 80009f6:	701a      	strb	r2, [r3, #0]
        newCmd = 1;
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_UART_RxCpltCallback+0x40>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&bt_rx, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <HAL_UART_RxCpltCallback+0x38>)
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <HAL_UART_RxCpltCallback+0x44>)
 8000a04:	f003 fe9a 	bl	800473c <HAL_UART_Receive_IT>
    }
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013800 	.word	0x40013800
 8000a14:	20000194 	.word	0x20000194
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000195 	.word	0x20000195
 8000a20:	20000124 	.word	0x20000124

08000a24 <main>:
/* USER CODE END 0 */

int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	@ 0x50
 8000a28:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a2a:	f000 fffd 	bl	8001a28 <HAL_Init>
  SystemClock_Config();
 8000a2e:	f000 fa5b 	bl	8000ee8 <SystemClock_Config>
  MX_GPIO_Init();
 8000a32:	f000 fb77 	bl	8001124 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a36:	f000 fa9d 	bl	8000f74 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a3a:	f000 fac9 	bl	8000fd0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a3e:	f000 fb47 	bl	80010d0 <MX_USART1_UART_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a42:	2100      	movs	r1, #0
 8000a44:	486f      	ldr	r0, [pc, #444]	@ (8000c04 <main+0x1e0>)
 8000a46:	f003 f8ef 	bl	8003c28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a4a:	2108      	movs	r1, #8
 8000a4c:	486d      	ldr	r0, [pc, #436]	@ (8000c04 <main+0x1e0>)
 8000a4e:	f003 f8eb 	bl	8003c28 <HAL_TIM_PWM_Start>

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a52:	4b6d      	ldr	r3, [pc, #436]	@ (8000c08 <main+0x1e4>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a6c      	ldr	r2, [pc, #432]	@ (8000c08 <main+0x1e4>)
 8000a58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a5c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8000c0c <main+0x1e8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
 8000a64:	4b69      	ldr	r3, [pc, #420]	@ (8000c0c <main+0x1e8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a68      	ldr	r2, [pc, #416]	@ (8000c0c <main+0x1e8>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  Kalman_Init(&kal);
 8000a70:	4867      	ldr	r0, [pc, #412]	@ (8000c10 <main+0x1ec>)
 8000a72:	f7ff fe65 	bl	8000740 <Kalman_Init>
  MPU6050_Init();
 8000a76:	f000 fbb3 	bl	80011e0 <MPU6050_Init>

  uint32_t  tPrev = micros();
 8000a7a:	f7ff ff99 	bl	80009b0 <micros>
 8000a7e:	64f8      	str	r0, [r7, #76]	@ 0x4c
  uint32_t  tick_start = HAL_GetTick();
 8000a80:	f001 f82a 	bl	8001ad8 <HAL_GetTick>
 8000a84:	6378      	str	r0, [r7, #52]	@ 0x34
  float     pitchDeg_raw = 0, gyro = 0;
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  float offset_sum = 0.0f;
 8000a92:	f04f 0300 	mov.w	r3, #0
 8000a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t offset_cnt = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	647b      	str	r3, [r7, #68]	@ 0x44
  static uint32_t counter = 0;
  static uint32_t last_debug = 0;

  while (1)
  {
    uint32_t now  = micros();
 8000a9c:	f7ff ff88 	bl	80009b0 <micros>
 8000aa0:	6338      	str	r0, [r7, #48]	@ 0x30
    float    dt   = (now - tPrev) * 1e-6f;
 8000aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc05 	bl	80002b8 <__aeabi_ui2f>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4958      	ldr	r1, [pc, #352]	@ (8000c14 <main+0x1f0>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fc58 	bl	8000368 <__aeabi_fmul>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	643b      	str	r3, [r7, #64]	@ 0x40

    if (dt < LOOP_MIN_DT_S) continue;
 8000abc:	4956      	ldr	r1, [pc, #344]	@ (8000c18 <main+0x1f4>)
 8000abe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ac0:	f7ff fdf0 	bl	80006a4 <__aeabi_fcmplt>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 81ee 	bne.w	8000ea8 <main+0x484>
    if (dt > LOOP_MAX_DT_S) dt = LOOP_MAX_DT_S;
 8000acc:	4953      	ldr	r1, [pc, #332]	@ (8000c1c <main+0x1f8>)
 8000ace:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ad0:	f7ff fe06 	bl	80006e0 <__aeabi_fcmpgt>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <main+0xba>
 8000ada:	4b50      	ldr	r3, [pc, #320]	@ (8000c1c <main+0x1f8>)
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40
    tPrev = now;
 8000ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    counter++;
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8000c20 <main+0x1fc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8000c20 <main+0x1fc>)
 8000aea:	6013      	str	r3, [r2, #0]

    if (HAL_GetTick() - last_debug >= 1000) {
 8000aec:	f000 fff4 	bl	8001ad8 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	4b4c      	ldr	r3, [pc, #304]	@ (8000c24 <main+0x200>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000afc:	d30d      	bcc.n	8000b1a <main+0xf6>
      printf("Loop/s: %lu\r\n", counter);
 8000afe:	4b48      	ldr	r3, [pc, #288]	@ (8000c20 <main+0x1fc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4848      	ldr	r0, [pc, #288]	@ (8000c28 <main+0x204>)
 8000b06:	f004 fc13 	bl	8005330 <iprintf>
      counter = 0;
 8000b0a:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <main+0x1fc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
      last_debug = HAL_GetTick();
 8000b10:	f000 ffe2 	bl	8001ad8 <HAL_GetTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a43      	ldr	r2, [pc, #268]	@ (8000c24 <main+0x200>)
 8000b18:	6013      	str	r3, [r2, #0]
    }

    readMPU(&pitchDeg_raw, &gyro, dt);
 8000b1a:	1d39      	adds	r1, r7, #4
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fc64 	bl	80013f0 <readMPU>

    if (!autoCalib_done && HAL_GetTick() - tick_start < AUTOCALIB_MS) {
 8000b28:	4b40      	ldr	r3, [pc, #256]	@ (8000c2c <main+0x208>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d11b      	bne.n	8000b68 <main+0x144>
 8000b30:	f000 ffd2 	bl	8001ad8 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d812      	bhi.n	8000b68 <main+0x144>
      HAL_GPIO_WritePin(LED_CALIB_PORT, LED_CALIB_PIN, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b48:	4839      	ldr	r0, [pc, #228]	@ (8000c30 <main+0x20c>)
 8000b4a:	f001 fb37 	bl	80021bc <HAL_GPIO_WritePin>
      stopMotor();
 8000b4e:	f000 fcbb 	bl	80014c8 <stopMotor>
      offset_sum += pitchDeg_raw;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	4619      	mov	r1, r3
 8000b56:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b58:	f7ff fafe 	bl	8000158 <__addsf3>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      offset_cnt++;
 8000b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b62:	3301      	adds	r3, #1
 8000b64:	647b      	str	r3, [r7, #68]	@ 0x44
      continue;
 8000b66:	e1a0      	b.n	8000eaa <main+0x486>
    }
    else if (!autoCalib_done) {
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <main+0x208>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d11c      	bne.n	8000baa <main+0x186>
      angle_offset_deg = offset_sum / (float)offset_cnt;
 8000b70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000b72:	f7ff fba1 	bl	80002b8 <__aeabi_ui2f>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b7c:	f7ff fca8 	bl	80004d0 <__aeabi_fdiv>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <main+0x210>)
 8000b86:	601a      	str	r2, [r3, #0]
      autoCalib_done   = 1;
 8000b88:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <main+0x208>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
      integ = 0.0f;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <main+0x214>)
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
      setPoint = setPointOriginal ;
 8000b96:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <main+0x218>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a29      	ldr	r2, [pc, #164]	@ (8000c40 <main+0x21c>)
 8000b9c:	6013      	str	r3, [r2, #0]
      HAL_GPIO_WritePin(LED_CALIB_PORT, LED_CALIB_PIN, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba4:	4822      	ldr	r0, [pc, #136]	@ (8000c30 <main+0x20c>)
 8000ba6:	f001 fb09 	bl	80021bc <HAL_GPIO_WritePin>
    }

    float pitchDeg = pitchDeg_raw - angle_offset_deg;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <main+0x210>)
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff face 	bl	8000154 <__aeabi_fsub>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fabsf(pitchDeg) > FALL_ANGLE) {
 8000bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000bc2:	4920      	ldr	r1, [pc, #128]	@ (8000c44 <main+0x220>)
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd8b 	bl	80006e0 <__aeabi_fcmpgt>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d043      	beq.n	8000c58 <main+0x234>
      stopMotor();
 8000bd0:	f000 fc7a 	bl	80014c8 <stopMotor>
      integ = prevErr = prevDeriv = 0;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <main+0x224>)
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <main+0x224>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c4c <main+0x228>)
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <main+0x228>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <main+0x214>)
 8000bea:	6013      	str	r3, [r2, #0]
      current_turn_direction = 'S';
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <main+0x22c>)
 8000bee:	2253      	movs	r2, #83	@ 0x53
 8000bf0:	701a      	strb	r2, [r3, #0]
      setPoint = setPointOriginal;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <main+0x218>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <main+0x21c>)
 8000bf8:	6013      	str	r3, [r2, #0]
      prev_bt_cmd = 'S';
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <main+0x230>)
 8000bfc:	2253      	movs	r2, #83	@ 0x53
 8000bfe:	701a      	strb	r2, [r3, #0]
      continue;
 8000c00:	e153      	b.n	8000eaa <main+0x486>
 8000c02:	bf00      	nop
 8000c04:	200000dc 	.word	0x200000dc
 8000c08:	e000edf0 	.word	0xe000edf0
 8000c0c:	e0001000 	.word	0xe0001000
 8000c10:	2000016c 	.word	0x2000016c
 8000c14:	358637bd 	.word	0x358637bd
 8000c18:	3ba3d70a 	.word	0x3ba3d70a
 8000c1c:	3b83126f 	.word	0x3b83126f
 8000c20:	200001b8 	.word	0x200001b8
 8000c24:	200001bc 	.word	0x200001bc
 8000c28:	080063f0 	.word	0x080063f0
 8000c2c:	200001b4 	.word	0x200001b4
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	200001b0 	.word	0x200001b0
 8000c38:	20000198 	.word	0x20000198
 8000c3c:	200001a4 	.word	0x200001a4
 8000c40:	200001a8 	.word	0x200001a8
 8000c44:	42340000 	.word	0x42340000
 8000c48:	200001a0 	.word	0x200001a0
 8000c4c:	2000019c 	.word	0x2000019c
 8000c50:	20000001 	.word	0x20000001
 8000c54:	20000002 	.word	0x20000002
    }

    float theta = pitchDeg * DEG2RAD;
 8000c58:	4994      	ldr	r1, [pc, #592]	@ (8000eac <main+0x488>)
 8000c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c5c:	f7ff fb84 	bl	8000368 <__aeabi_fmul>
 8000c60:	4603      	mov	r3, r0
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
    float omega = -gyro * DEG2RAD;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000c6a:	4990      	ldr	r1, [pc, #576]	@ (8000eac <main+0x488>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fb7b 	bl	8000368 <__aeabi_fmul>
 8000c72:	4603      	mov	r3, r0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    float err   = setPoint - theta;
 8000c76:	4b8e      	ldr	r3, [pc, #568]	@ (8000eb0 <main+0x48c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fa69 	bl	8000154 <__aeabi_fsub>
 8000c82:	4603      	mov	r3, r0
 8000c84:	623b      	str	r3, [r7, #32]

    float up = KP * err;
 8000c86:	498b      	ldr	r1, [pc, #556]	@ (8000eb4 <main+0x490>)
 8000c88:	6a38      	ldr	r0, [r7, #32]
 8000c8a:	f7ff fb6d 	bl	8000368 <__aeabi_fmul>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	61fb      	str	r3, [r7, #28]
    float ud = KD * omega;
 8000c92:	4989      	ldr	r1, [pc, #548]	@ (8000eb8 <main+0x494>)
 8000c94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c96:	f7ff fb67 	bl	8000368 <__aeabi_fmul>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	61bb      	str	r3, [r7, #24]
    integ += err * dt;
 8000c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000ca0:	6a38      	ldr	r0, [r7, #32]
 8000ca2:	f7ff fb61 	bl	8000368 <__aeabi_fmul>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b84      	ldr	r3, [pc, #528]	@ (8000ebc <main+0x498>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	f7ff fa51 	bl	8000158 <__addsf3>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b80      	ldr	r3, [pc, #512]	@ (8000ebc <main+0x498>)
 8000cbc:	601a      	str	r2, [r3, #0]
    if (integ >  I_LIM) integ =  I_LIM;
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8000ebc <main+0x498>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	497f      	ldr	r1, [pc, #508]	@ (8000ec0 <main+0x49c>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd0b 	bl	80006e0 <__aeabi_fcmpgt>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <main+0x2b2>
 8000cd0:	4b7a      	ldr	r3, [pc, #488]	@ (8000ebc <main+0x498>)
 8000cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8000ec0 <main+0x49c>)
 8000cd4:	601a      	str	r2, [r3, #0]
    if (integ < -I_LIM) integ = -I_LIM;
 8000cd6:	4b79      	ldr	r3, [pc, #484]	@ (8000ebc <main+0x498>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	497a      	ldr	r1, [pc, #488]	@ (8000ec4 <main+0x4a0>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fce1 	bl	80006a4 <__aeabi_fcmplt>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <main+0x2ca>
 8000ce8:	4b74      	ldr	r3, [pc, #464]	@ (8000ebc <main+0x498>)
 8000cea:	4a76      	ldr	r2, [pc, #472]	@ (8000ec4 <main+0x4a0>)
 8000cec:	601a      	str	r2, [r3, #0]
    float ui = KI * integ;
 8000cee:	4b73      	ldr	r3, [pc, #460]	@ (8000ebc <main+0x498>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f04f 0100 	mov.w	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fb36 	bl	8000368 <__aeabi_fmul>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	617b      	str	r3, [r7, #20]

    float out = up + ud + ui;
 8000d00:	69b9      	ldr	r1, [r7, #24]
 8000d02:	69f8      	ldr	r0, [r7, #28]
 8000d04:	f7ff fa28 	bl	8000158 <__addsf3>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6978      	ldr	r0, [r7, #20]
 8000d0e:	f7ff fa23 	bl	8000158 <__addsf3>
 8000d12:	4603      	mov	r3, r0
 8000d14:	613b      	str	r3, [r7, #16]

    int16_t pwm_raw = (int16_t)(out * 1000.0f);
 8000d16:	496c      	ldr	r1, [pc, #432]	@ (8000ec8 <main+0x4a4>)
 8000d18:	6938      	ldr	r0, [r7, #16]
 8000d1a:	f7ff fb25 	bl	8000368 <__aeabi_fmul>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fce7 	bl	80006f4 <__aeabi_f2iz>
 8000d26:	4603      	mov	r3, r0
 8000d28:	81fb      	strh	r3, [r7, #14]
    int16_t sign    = (pwm_raw >= 0) ?  1 : -1;
 8000d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db01      	blt.n	8000d36 <main+0x312>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e001      	b.n	8000d3a <main+0x316>
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	81bb      	strh	r3, [r7, #12]
    int16_t mag     = abs(pwm_raw);
 8000d3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bfb8      	it	lt
 8000d44:	425b      	neglt	r3, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    if (mag < DEAD_PWM) {
 8000d4a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000d4e:	2b95      	cmp	r3, #149	@ 0x95
 8000d50:	dc1a      	bgt.n	8000d88 <main+0x364>
      if (fabsf(pitchDeg) < ANGLE_STOP_TH && fabsf(gyro) < GYRO_STOP_TH) {
 8000d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d58:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fca1 	bl	80006a4 <__aeabi_fcmplt>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00d      	beq.n	8000d84 <main+0x360>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fc96 	bl	80006a4 <__aeabi_fcmplt>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <main+0x360>
        mag = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8000d82:	e001      	b.n	8000d88 <main+0x364>
      } else {
        mag = DEAD_PWM;
 8000d84:	2396      	movs	r3, #150	@ 0x96
 8000d86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      }
    }

    int16_t pwm = sign * mag;
 8000d88:	89bb      	ldrh	r3, [r7, #12]
 8000d8a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (pwm >  MAX_PWM) pwm =  MAX_PWM;
 8000d94:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8000d98:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	dd02      	ble.n	8000da6 <main+0x382>
 8000da0:	f640 238c 	movw	r3, #2700	@ 0xa8c
 8000da4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (pwm < -MAX_PWM) pwm = -MAX_PWM;
 8000da6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8000daa:	4a48      	ldr	r2, [pc, #288]	@ (8000ecc <main+0x4a8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	da02      	bge.n	8000db6 <main+0x392>
 8000db0:	f24f 5374 	movw	r3, #62836	@ 0xf574
 8000db4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    int16_t left_pwm  = pwm;
 8000db6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000db8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    int16_t right_pwm = pwm;
 8000dba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000dbc:	873b      	strh	r3, [r7, #56]	@ 0x38

    if (current_turn_direction != 'S' && now < turn_active_until) {
 8000dbe:	4b44      	ldr	r3, [pc, #272]	@ (8000ed0 <main+0x4ac>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b53      	cmp	r3, #83	@ 0x53
 8000dc6:	d01b      	beq.n	8000e00 <main+0x3dc>
 8000dc8:	4b42      	ldr	r3, [pc, #264]	@ (8000ed4 <main+0x4b0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d216      	bcs.n	8000e00 <main+0x3dc>
      if (current_turn_direction == 'L') {
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed0 <main+0x4ac>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b4c      	cmp	r3, #76	@ 0x4c
 8000dda:	d108      	bne.n	8000dee <main+0x3ca>
        left_pwm  = pwm - TURN_PWM_OFFSET;
 8000ddc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000dde:	3b50      	subs	r3, #80	@ 0x50
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        right_pwm = pwm + TURN_PWM_OFFSET;
 8000de4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000de6:	3350      	adds	r3, #80	@ 0x50
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (current_turn_direction == 'L') {
 8000dec:	e00e      	b.n	8000e0c <main+0x3e8>
      } else {
        left_pwm  = pwm + TURN_PWM_OFFSET;
 8000dee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000df0:	3350      	adds	r3, #80	@ 0x50
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        right_pwm = pwm - TURN_PWM_OFFSET;
 8000df6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000df8:	3b50      	subs	r3, #80	@ 0x50
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (current_turn_direction == 'L') {
 8000dfe:	e005      	b.n	8000e0c <main+0x3e8>
      }
    } else {
      current_turn_direction = 'S';
 8000e00:	4b33      	ldr	r3, [pc, #204]	@ (8000ed0 <main+0x4ac>)
 8000e02:	2253      	movs	r2, #83	@ 0x53
 8000e04:	701a      	strb	r2, [r3, #0]
      prev_bt_cmd = 'S';
 8000e06:	4b34      	ldr	r3, [pc, #208]	@ (8000ed8 <main+0x4b4>)
 8000e08:	2253      	movs	r2, #83	@ 0x53
 8000e0a:	701a      	strb	r2, [r3, #0]
    }

    left_pwm  = (int16_t)(left_pwm * LEFT_MOTOR_COMP);
 8000e0c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fa55 	bl	80002c0 <__aeabi_i2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4930      	ldr	r1, [pc, #192]	@ (8000edc <main+0x4b8>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff faa4 	bl	8000368 <__aeabi_fmul>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc66 	bl	80006f4 <__aeabi_f2iz>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    right_pwm = (int16_t)(right_pwm * RIGHT_MOTOR_COMP);
 8000e2c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fa45 	bl	80002c0 <__aeabi_i2f>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fc5b 	bl	80006f4 <__aeabi_f2iz>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	873b      	strh	r3, [r7, #56]	@ 0x38

    left_pwm  = fminf(fmaxf(left_pwm,  -MAX_PWM), MAX_PWM);
 8000e42:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fa3a 	bl	80002c0 <__aeabi_i2f>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4924      	ldr	r1, [pc, #144]	@ (8000ee0 <main+0x4bc>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 f8e5 	bl	8006020 <fmaxf>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4922      	ldr	r1, [pc, #136]	@ (8000ee4 <main+0x4c0>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 f8f5 	bl	800604a <fminf>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc46 	bl	80006f4 <__aeabi_f2iz>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    right_pwm = fminf(fmaxf(right_pwm, -MAX_PWM), MAX_PWM);
 8000e6c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fa25 	bl	80002c0 <__aeabi_i2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4919      	ldr	r1, [pc, #100]	@ (8000ee0 <main+0x4bc>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 f8d0 	bl	8006020 <fmaxf>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4918      	ldr	r1, [pc, #96]	@ (8000ee4 <main+0x4c0>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 f8e0 	bl	800604a <fminf>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc31 	bl	80006f4 <__aeabi_f2iz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	873b      	strh	r3, [r7, #56]	@ 0x38

    setIndividualMotors(left_pwm, right_pwm);
 8000e96:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8000e9a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fb27 	bl	80014f4 <setIndividualMotors>
 8000ea6:	e5f9      	b.n	8000a9c <main+0x78>
    if (dt < LOOP_MIN_DT_S) continue;
 8000ea8:	bf00      	nop
  {
 8000eaa:	e5f7      	b.n	8000a9c <main+0x78>
 8000eac:	3c8efa35 	.word	0x3c8efa35
 8000eb0:	200001a8 	.word	0x200001a8
 8000eb4:	42180000 	.word	0x42180000
 8000eb8:	40a00000 	.word	0x40a00000
 8000ebc:	20000198 	.word	0x20000198
 8000ec0:	40200000 	.word	0x40200000
 8000ec4:	c0200000 	.word	0xc0200000
 8000ec8:	447a0000 	.word	0x447a0000
 8000ecc:	fffff574 	.word	0xfffff574
 8000ed0:	20000001 	.word	0x20000001
 8000ed4:	200001ac 	.word	0x200001ac
 8000ed8:	20000002 	.word	0x20000002
 8000edc:	3f866666 	.word	0x3f866666
 8000ee0:	c528c000 	.word	0xc528c000
 8000ee4:	4528c000 	.word	0x4528c000

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b090      	sub	sp, #64	@ 0x40
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	2228      	movs	r2, #40	@ 0x28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 fa6f 	bl	80053da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 f9c1 	bl	80032b8 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f3c:	f000 fb5c 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fc2e 	bl	80037bc <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f66:	f000 fb47 	bl	80015f8 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3740      	adds	r7, #64	@ 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C1_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C1_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fb2:	f001 f91b 	bl	80021ec <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fb1c 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000088 	.word	0x20000088
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	00061a80 	.word	0x00061a80

08000fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	@ 0x38
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b32      	ldr	r3, [pc, #200]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001008:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <MX_TIM2_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600;
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001016:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <MX_TIM2_Init+0xfc>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001028:	4828      	ldr	r0, [pc, #160]	@ (80010cc <MX_TIM2_Init+0xfc>)
 800102a:	f002 fd55 	bl	8003ad8 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001034:	f000 fae0 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001042:	4619      	mov	r1, r3
 8001044:	4821      	ldr	r0, [pc, #132]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001046:	f002 ff53 	bl	8003ef0 <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001050:	f000 fad2 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001054:	481d      	ldr	r0, [pc, #116]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001056:	f002 fd8e 	bl	8003b76 <HAL_TIM_PWM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001060:	f000 faca 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4619      	mov	r1, r3
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <MX_TIM2_Init+0xfc>)
 8001074:	f003 fab4 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800107e:	f000 fabb 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001082:	2360      	movs	r3, #96	@ 0x60
 8001084:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_TIM2_Init+0xfc>)
 800109a:	f002 fe67 	bl	8003d6c <HAL_TIM_PWM_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80010a4:	f000 faa8 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2208      	movs	r2, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <MX_TIM2_Init+0xfc>)
 80010b0:	f002 fe5c 	bl	8003d6c <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80010ba:	f000 fa9d 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010be:	4803      	ldr	r0, [pc, #12]	@ (80010cc <MX_TIM2_Init+0xfc>)
 80010c0:	f000 fb2c 	bl	800171c <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3738      	adds	r7, #56	@ 0x38
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000dc 	.word	0x200000dc

080010d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <MX_USART1_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_USART1_UART_Init+0x4c>)
 8001108:	f003 fac8 	bl	800469c <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 fa71 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000124 	.word	0x20000124
 8001120:	40013800 	.word	0x40013800

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a20      	ldr	r2, [pc, #128]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 8001156:	f043 0320 	orr.w	r3, r3, #32
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a1a      	ldr	r2, [pc, #104]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_GPIO_Init+0xb4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f640 4103 	movw	r1, #3075	@ 0xc03
 800119e:	480f      	ldr	r0, [pc, #60]	@ (80011dc <MX_GPIO_Init+0xb8>)
 80011a0:	f001 f80c 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011aa:	480c      	ldr	r0, [pc, #48]	@ (80011dc <MX_GPIO_Init+0xb8>)
 80011ac:	f001 f806 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80011b0:	f641 4303 	movw	r3, #7171	@ 0x1c03
 80011b4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_GPIO_Init+0xb8>)
 80011ca:	f000 fe73 	bl	8001eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <MPU6050_Init>:

/* USER CODE BEGIN 4 */
/* ---------------- MPU6050 ---------------- */
void MPU6050_Init(void)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b093      	sub	sp, #76	@ 0x4c
 80011e4:	af04      	add	r7, sp, #16
    uint8_t d = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	76fb      	strb	r3, [r7, #27]
    // Reset device - recommended by datasheet when changing power settings
    // HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x6B, 1, &(uint8_t){0x80}, 1, HAL_MAX_DELAY); // Reset MPU6050
    // HAL_Delay(100);

    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x6B, 1, &d, 1, HAL_MAX_DELAY);
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f107 031b 	add.w	r3, r7, #27
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	226b      	movs	r2, #107	@ 0x6b
 80011fe:	21d0      	movs	r1, #208	@ 0xd0
 8001200:	4875      	ldr	r0, [pc, #468]	@ (80013d8 <MPU6050_Init+0x1f8>)
 8001202:	f001 f937 	bl	8002474 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	@ 0x64
 8001208:	f000 fc70 	bl	8001aec <HAL_Delay>

    // Configure MPU6050 registers explicitly as in Arduino example comments
    // SMPLRT_DIV (0x19): Set sample rate to 1000Hz (8kHz / (7+1))
    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x19, 1, &(uint8_t){0x07}, 1, HAL_MAX_DELAY);
 800120c:	2307      	movs	r3, #7
 800120e:	76bb      	strb	r3, [r7, #26]
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 031a 	add.w	r3, r7, #26
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2219      	movs	r2, #25
 8001224:	21d0      	movs	r1, #208	@ 0xd0
 8001226:	486c      	ldr	r0, [pc, #432]	@ (80013d8 <MPU6050_Init+0x1f8>)
 8001228:	f001 f924 	bl	8002474 <HAL_I2C_Mem_Write>
    // CONFIG (0x1A): Disable FSYNC, DLPF_CFG = 0 (256Hz Gyro, 260Hz Accel bandwidth)
    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1A, 1, &(uint8_t){0x00}, 1, HAL_MAX_DELAY);
 800122c:	2300      	movs	r3, #0
 800122e:	767b      	strb	r3, [r7, #25]
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 0319 	add.w	r3, r7, #25
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	221a      	movs	r2, #26
 8001244:	21d0      	movs	r1, #208	@ 0xd0
 8001246:	4864      	ldr	r0, [pc, #400]	@ (80013d8 <MPU6050_Init+0x1f8>)
 8001248:	f001 f914 	bl	8002474 <HAL_I2C_Mem_Write>
    // GYRO_CONFIG (0x1B): FS_SEL = 0 (+/- 250 deg/s)
    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1B, 1, &(uint8_t){0x00}, 1, HAL_MAX_DELAY);
 800124c:	2300      	movs	r3, #0
 800124e:	763b      	strb	r3, [r7, #24]
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	221b      	movs	r2, #27
 8001264:	21d0      	movs	r1, #208	@ 0xd0
 8001266:	485c      	ldr	r0, [pc, #368]	@ (80013d8 <MPU6050_Init+0x1f8>)
 8001268:	f001 f904 	bl	8002474 <HAL_I2C_Mem_Write>
    // ACCEL_CONFIG (0x1C): AFS_SEL = 0 (+/- 2g)
    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1C, 1, &(uint8_t){0x00}, 1, HAL_MAX_DELAY);
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 0317 	add.w	r3, r7, #23
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	221c      	movs	r2, #28
 8001284:	21d0      	movs	r1, #208	@ 0xd0
 8001286:	4854      	ldr	r0, [pc, #336]	@ (80013d8 <MPU6050_Init+0x1f8>)
 8001288:	f001 f8f4 	bl	8002474 <HAL_I2C_Mem_Write>

    /* lấy 200 mẫu avg để init Kalman.angle */
    int32_t sum = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < 200; i++) {
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
 8001294:	e04e      	b.n	8001334 <MPU6050_Init+0x154>
        uint8_t buf[6];
        if (HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x3B, 1, buf, 6, HAL_MAX_DELAY) != HAL_OK)
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2306      	movs	r3, #6
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	223b      	movs	r2, #59	@ 0x3b
 80012aa:	21d0      	movs	r1, #208	@ 0xd0
 80012ac:	484a      	ldr	r0, [pc, #296]	@ (80013d8 <MPU6050_Init+0x1f8>)
 80012ae:	f001 f9db 	bl	8002668 <HAL_I2C_Mem_Read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d139      	bne.n	800132c <MPU6050_Init+0x14c>
            continue;
        int16_t ax = (buf[0]<<8)|buf[1];
 80012b8:	7c3b      	ldrb	r3, [r7, #16]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7c7b      	ldrb	r3, [r7, #17]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        int16_t az = (buf[4]<<8)|buf[5];
 80012c8:	7d3b      	ldrb	r3, [r7, #20]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	7d7b      	ldrb	r3, [r7, #21]
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	847b      	strh	r3, [r7, #34]	@ 0x22
        float pitchAcc = atan2f(-ax, az) * 57.2958f;
 80012d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012dc:	425b      	negs	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ffee 	bl	80002c0 <__aeabi_i2f>
 80012e4:	4604      	mov	r4, r0
 80012e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ffe8 	bl	80002c0 <__aeabi_i2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f004 fe91 	bl	800601c <atan2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4937      	ldr	r1, [pc, #220]	@ (80013dc <MPU6050_Init+0x1fc>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f832 	bl	8000368 <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	61fb      	str	r3, [r7, #28]
        sum += pitchAcc;
 8001308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800130a:	f7fe ffd9 	bl	80002c0 <__aeabi_i2f>
 800130e:	4603      	mov	r3, r0
 8001310:	69f9      	ldr	r1, [r7, #28]
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ff20 	bl	8000158 <__addsf3>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f9ea 	bl	80006f4 <__aeabi_f2iz>
 8001320:	4603      	mov	r3, r0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
        HAL_Delay(2);
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fbe1 	bl	8001aec <HAL_Delay>
 800132a:	e000      	b.n	800132e <MPU6050_Init+0x14e>
            continue;
 800132c:	bf00      	nop
    for (int i = 0; i < 200; i++) {
 800132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001330:	3301      	adds	r3, #1
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
 8001334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001336:	2bc7      	cmp	r3, #199	@ 0xc7
 8001338:	ddad      	ble.n	8001296 <MPU6050_Init+0xb6>
    }
    kal.angle = sum / 200.0f;
 800133a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800133c:	f7fe ffc0 	bl	80002c0 <__aeabi_i2f>
 8001340:	4603      	mov	r3, r0
 8001342:	4927      	ldr	r1, [pc, #156]	@ (80013e0 <MPU6050_Init+0x200>)
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8c3 	bl	80004d0 <__aeabi_fdiv>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MPU6050_Init+0x204>)
 8001350:	60da      	str	r2, [r3, #12]

    /* gyro X offset */
    int32_t gsum = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < 1000; i++) {
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800135a:	e024      	b.n	80013a6 <MPU6050_Init+0x1c6>
        uint8_t buf[14];
        if (HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x3B, 1, buf, 14, HAL_MAX_DELAY) != HAL_OK)
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	230e      	movs	r3, #14
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	463b      	mov	r3, r7
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	223b      	movs	r2, #59	@ 0x3b
 800136e:	21d0      	movs	r1, #208	@ 0xd0
 8001370:	4819      	ldr	r0, [pc, #100]	@ (80013d8 <MPU6050_Init+0x1f8>)
 8001372:	f001 f979 	bl	8002668 <HAL_I2C_Mem_Read>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d110      	bne.n	800139e <MPU6050_Init+0x1be>
            continue;
        int16_t gx = (buf[8]<<8)|buf[9];
 800137c:	7a3b      	ldrb	r3, [r7, #8]
 800137e:	b21b      	sxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	7a7b      	ldrb	r3, [r7, #9]
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gsum += gx;
 800138c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001392:	4413      	add	r3, r2
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_Delay(1);
 8001396:	2001      	movs	r0, #1
 8001398:	f000 fba8 	bl	8001aec <HAL_Delay>
 800139c:	e000      	b.n	80013a0 <MPU6050_Init+0x1c0>
            continue;
 800139e:	bf00      	nop
    for (int i = 0; i < 1000; i++) {
 80013a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a2:	3301      	adds	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ac:	dbd6      	blt.n	800135c <MPU6050_Init+0x17c>
    }
    kal.bias = (float)gsum / 1000.0f / 131.0f;   /* bias lưu luôn vào Kalman */
 80013ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013b0:	f7fe ff86 	bl	80002c0 <__aeabi_i2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <MPU6050_Init+0x208>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f889 	bl	80004d0 <__aeabi_fdiv>
 80013be:	4603      	mov	r3, r0
 80013c0:	490a      	ldr	r1, [pc, #40]	@ (80013ec <MPU6050_Init+0x20c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f884 	bl	80004d0 <__aeabi_fdiv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <MPU6050_Init+0x204>)
 80013ce:	611a      	str	r2, [r3, #16]
}
 80013d0:	bf00      	nop
 80013d2:	373c      	adds	r7, #60	@ 0x3c
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	20000088 	.word	0x20000088
 80013dc:	42652ee6 	.word	0x42652ee6
 80013e0:	43480000 	.word	0x43480000
 80013e4:	2000016c 	.word	0x2000016c
 80013e8:	447a0000 	.word	0x447a0000
 80013ec:	43030000 	.word	0x43030000

080013f0 <readMPU>:

void readMPU(float *pitchDeg, float *gyroRate, float dt)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b091      	sub	sp, #68	@ 0x44
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
    uint8_t b[14];
    if (HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x3B, 1, b, 14, HAL_MAX_DELAY) != HAL_OK)
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	230e      	movs	r3, #14
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	223b      	movs	r2, #59	@ 0x3b
 8001410:	21d0      	movs	r1, #208	@ 0xd0
 8001412:	4829      	ldr	r0, [pc, #164]	@ (80014b8 <readMPU+0xc8>)
 8001414:	f001 f928 	bl	8002668 <HAL_I2C_Mem_Read>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d148      	bne.n	80014b0 <readMPU+0xc0>
        return;
    int16_t ax = (b[0]<<8)|b[1];
 800141e:	7d3b      	ldrb	r3, [r7, #20]
 8001420:	b21b      	sxth	r3, r3
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7d7b      	ldrb	r3, [r7, #21]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    int16_t az = (b[4]<<8)|b[5];
 800142e:	7e3b      	ldrb	r3, [r7, #24]
 8001430:	b21b      	sxth	r3, r3
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	7e7b      	ldrb	r3, [r7, #25]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    int16_t gx = (b[8]<<8)|b[9];
 800143e:	7f3b      	ldrb	r3, [r7, #28]
 8001440:	b21b      	sxth	r3, r3
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	7f7b      	ldrb	r3, [r7, #29]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	857b      	strh	r3, [r7, #42]	@ 0x2a

    *gyroRate = (gx / 131.0f);  // bias is compensated inside Kalman_GetAngle
 800144e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ff34 	bl	80002c0 <__aeabi_i2f>
 8001458:	4603      	mov	r3, r0
 800145a:	4918      	ldr	r1, [pc, #96]	@ (80014bc <readMPU+0xcc>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f837 	bl	80004d0 <__aeabi_fdiv>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	601a      	str	r2, [r3, #0]
    float pitchAcc = atan2f(-ax, az) * 57.2958f; // atan(-ax/az)
 800146a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800146e:	425b      	negs	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ff25 	bl	80002c0 <__aeabi_i2f>
 8001476:	4604      	mov	r4, r0
 8001478:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ff1f 	bl	80002c0 <__aeabi_i2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	4620      	mov	r0, r4
 8001488:	f004 fdc8 	bl	800601c <atan2f>
 800148c:	4603      	mov	r3, r0
 800148e:	490c      	ldr	r1, [pc, #48]	@ (80014c0 <readMPU+0xd0>)
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ff69 	bl	8000368 <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    *pitchDeg = Kalman_GetAngle(&kal, pitchAcc, *gyroRate, dt);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014a2:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <readMPU+0xd4>)
 80014a4:	f7ff f978 	bl	8000798 <Kalman_GetAngle>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e000      	b.n	80014b2 <readMPU+0xc2>
        return;
 80014b0:	bf00      	nop
}
 80014b2:	3734      	adds	r7, #52	@ 0x34
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	20000088 	.word	0x20000088
 80014bc:	43030000 	.word	0x43030000
 80014c0:	42652ee6 	.word	0x42652ee6
 80014c4:	2000016c 	.word	0x2000016c

080014c8 <stopMotor>:

/* --------------- Motor helpers --------------- */
void stopMotor(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <stopMotor+0x24>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <stopMotor+0x24>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(DIR_PORT, DIR_L_F|DIR_L_R|DIR_R_F|DIR_R_R, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f640 4103 	movw	r1, #3075	@ 0xc03
 80014e2:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <stopMotor+0x28>)
 80014e4:	f000 fe6a 	bl	80021bc <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000dc 	.word	0x200000dc
 80014f0:	40010c00 	.word	0x40010c00

080014f4 <setIndividualMotors>:

void setIndividualMotors(int16_t left_pwm, int16_t right_pwm)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	80fb      	strh	r3, [r7, #6]
 8001500:	4613      	mov	r3, r2
 8001502:	80bb      	strh	r3, [r7, #4]
    /* Left direction */
    int16_t lsign = (left_pwm >= 0) ? 1 : -1;
 8001504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db01      	blt.n	8001510 <setIndividualMotors+0x1c>
 800150c:	2301      	movs	r3, #1
 800150e:	e001      	b.n	8001514 <setIndividualMotors+0x20>
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	81fb      	strh	r3, [r7, #14]
    if (lsign < 0) left_pwm = -left_pwm;
 8001516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da03      	bge.n	8001526 <setIndividualMotors+0x32>
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	425b      	negs	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	80fb      	strh	r3, [r7, #6]

    HAL_GPIO_WritePin(DIR_PORT, DIR_L_F, (lsign > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bfcc      	ite	gt
 800152e:	2301      	movgt	r3, #1
 8001530:	2300      	movle	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	2101      	movs	r1, #1
 8001538:	482d      	ldr	r0, [pc, #180]	@ (80015f0 <setIndividualMotors+0xfc>)
 800153a:	f000 fe3f 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_PORT, DIR_L_R, (lsign > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800153e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001542:	2b00      	cmp	r3, #0
 8001544:	bfd4      	ite	le
 8001546:	2301      	movle	r3, #1
 8001548:	2300      	movgt	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	2102      	movs	r1, #2
 8001550:	4827      	ldr	r0, [pc, #156]	@ (80015f0 <setIndividualMotors+0xfc>)
 8001552:	f000 fe33 	bl	80021bc <HAL_GPIO_WritePin>
    if (left_pwm == 0) HAL_GPIO_WritePin(DIR_PORT, DIR_L_F|DIR_L_R, GPIO_PIN_RESET);
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <setIndividualMotors+0x74>
 800155e:	2200      	movs	r2, #0
 8001560:	2103      	movs	r1, #3
 8001562:	4823      	ldr	r0, [pc, #140]	@ (80015f0 <setIndividualMotors+0xfc>)
 8001564:	f000 fe2a 	bl	80021bc <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, left_pwm);
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <setIndividualMotors+0x100>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34

    int16_t rsign = (right_pwm >= 0) ? 1 : -1;
 8001572:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db01      	blt.n	800157e <setIndividualMotors+0x8a>
 800157a:	2301      	movs	r3, #1
 800157c:	e001      	b.n	8001582 <setIndividualMotors+0x8e>
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	81bb      	strh	r3, [r7, #12]
    if (rsign < 0) right_pwm = -right_pwm;
 8001584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	da03      	bge.n	8001594 <setIndividualMotors+0xa0>
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	425b      	negs	r3, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	80bb      	strh	r3, [r7, #4]

    HAL_GPIO_WritePin(DIR_PORT, DIR_R_F, (rsign > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001594:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfd4      	ite	le
 800159c:	2301      	movle	r3, #1
 800159e:	2300      	movgt	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015a8:	4811      	ldr	r0, [pc, #68]	@ (80015f0 <setIndividualMotors+0xfc>)
 80015aa:	f000 fe07 	bl	80021bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIR_PORT, DIR_R_R, (rsign > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bfcc      	ite	gt
 80015b6:	2301      	movgt	r3, #1
 80015b8:	2300      	movle	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015c2:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <setIndividualMotors+0xfc>)
 80015c4:	f000 fdfa 	bl	80021bc <HAL_GPIO_WritePin>
    if (right_pwm == 0) HAL_GPIO_WritePin(DIR_PORT, DIR_R_F|DIR_R_R, GPIO_PIN_RESET);
 80015c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <setIndividualMotors+0xe8>
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80015d6:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <setIndividualMotors+0xfc>)
 80015d8:	f000 fdf0 	bl	80021bc <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, right_pwm);
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <setIndividualMotors+0x100>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	200000dc 	.word	0x200000dc

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <Error_Handler+0x8>

08001604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_MspInit+0x5c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <HAL_MspInit+0x5c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_MspInit+0x5c>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_MspInit+0x5c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_MspInit+0x5c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_MspInit+0x5c>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_MspInit+0x60>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_MspInit+0x60>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000

08001668 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <HAL_I2C_MspInit+0x70>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d123      	bne.n	80016d0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_I2C_MspInit+0x74>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <HAL_I2C_MspInit+0x74>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_I2C_MspInit+0x74>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a0:	23c0      	movs	r3, #192	@ 0xc0
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <HAL_I2C_MspInit+0x78>)
 80016b4:	f000 fbfe 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_I2C_MspInit+0x74>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_I2C_MspInit+0x74>)
 80016be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c2:	61d3      	str	r3, [r2, #28]
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_I2C_MspInit+0x74>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40005400 	.word	0x40005400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010c00 	.word	0x40010c00

080016e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	d10b      	bne.n	800170e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_TIM_Base_MspInit+0x34>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_TIM_Base_MspInit+0x34>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_TIM_Base_MspInit+0x34>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173a:	d117      	bne.n	800176c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_TIM_MspPostInit+0x58>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <HAL_TIM_MspPostInit+0x58>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_TIM_MspPostInit+0x58>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001754:	2305      	movs	r3, #5
 8001756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4804      	ldr	r0, [pc, #16]	@ (8001778 <HAL_TIM_MspPostInit+0x5c>)
 8001768:	f000 fba4 	bl	8001eb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	40010800 	.word	0x40010800

0800177c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <HAL_UART_MspInit+0x9c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d139      	bne.n	8001810 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <HAL_UART_MspInit+0xa0>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_UART_MspInit+0xa0>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <HAL_UART_MspInit+0xa0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_UART_MspInit+0xa0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a18      	ldr	r2, [pc, #96]	@ (800181c <HAL_UART_MspInit+0xa0>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_UART_MspInit+0xa0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4619      	mov	r1, r3
 80017e0:	480f      	ldr	r0, [pc, #60]	@ (8001820 <HAL_UART_MspInit+0xa4>)
 80017e2:	f000 fb67 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	4809      	ldr	r0, [pc, #36]	@ (8001820 <HAL_UART_MspInit+0xa4>)
 80017fc:	f000 fb5a 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2025      	movs	r0, #37	@ 0x25
 8001806:	f000 fa6c 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800180a:	2025      	movs	r0, #37	@ 0x25
 800180c:	f000 fa85 	bl	8001d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40013800 	.word	0x40013800
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <NMI_Handler+0x4>

0800182c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <MemManage_Handler+0x4>

0800183c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <UsageFault_Handler+0x4>

0800184c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001874:	f000 f91e 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USART1_IRQHandler+0x10>)
 8001882:	f002 ff81 	bl	8004788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000124 	.word	0x20000124

08001890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001928:	605a      	str	r2, [r3, #4]
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <_isatty>:

int _isatty(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f003 fd70 	bl	8005478 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20005000 	.word	0x20005000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	200001c0 	.word	0x200001c0
 80019cc:	20000318 	.word	0x20000318

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff fff8 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019e2:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f8:	4c09      	ldr	r4, [pc, #36]	@ (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f003 fd3d 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff f80b 	bl	8000a24 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a18:	080064a0 	.word	0x080064a0
  ldr r2, =_sbss
 8001a1c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a20:	20000314 	.word	0x20000314

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f947 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fdde 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f95f 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f927 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	200001c4 	.word	0x200001c4

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	200001c4 	.word	0x200001c4

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4906      	ldr	r1, [pc, #24]	@ (8001bcc <__NVIC_EnableIRQ+0x34>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff90 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff2d 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff42 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff90 	bl	8001c24 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff35 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e020      	b.n	8001dba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020e 	bic.w	r2, r2, #14
 8001d86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d005      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e051      	b.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 020e 	bic.w	r2, r2, #14
 8001df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <HAL_DMA_Abort_IT+0xd4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d029      	beq.n	8001e66 <HAL_DMA_Abort_IT+0xa2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <HAL_DMA_Abort_IT+0xd8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d022      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x9e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_DMA_Abort_IT+0xdc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01a      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x98>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_DMA_Abort_IT+0xe0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x92>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_DMA_Abort_IT+0xe4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00a      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x8c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_DMA_Abort_IT+0xe8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_DMA_Abort_IT+0x86>
 8001e44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e48:	e00e      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e4e:	e00b      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e54:	e008      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	e005      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e60:	e002      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e62:	2310      	movs	r3, #16
 8001e64:	e000      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e66:	2301      	movs	r3, #1
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_DMA_Abort_IT+0xec>)
 8001e6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
    } 
  }
  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020008 	.word	0x40020008
 8001e9c:	4002001c 	.word	0x4002001c
 8001ea0:	40020030 	.word	0x40020030
 8001ea4:	40020044 	.word	0x40020044
 8001ea8:	40020058 	.word	0x40020058
 8001eac:	4002006c 	.word	0x4002006c
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	@ 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e169      	b.n	800219c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8158 	bne.w	8002196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a9a      	ldr	r2, [pc, #616]	@ (8002154 <HAL_GPIO_Init+0x2a0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05e      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001ef0:	4a98      	ldr	r2, [pc, #608]	@ (8002154 <HAL_GPIO_Init+0x2a0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d875      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a98      	ldr	r2, [pc, #608]	@ (8002158 <HAL_GPIO_Init+0x2a4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d058      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001efc:	4a96      	ldr	r2, [pc, #600]	@ (8002158 <HAL_GPIO_Init+0x2a4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d86f      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f02:	4a96      	ldr	r2, [pc, #600]	@ (800215c <HAL_GPIO_Init+0x2a8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d052      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f08:	4a94      	ldr	r2, [pc, #592]	@ (800215c <HAL_GPIO_Init+0x2a8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d869      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a94      	ldr	r2, [pc, #592]	@ (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04c      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f14:	4a92      	ldr	r2, [pc, #584]	@ (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d863      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a92      	ldr	r2, [pc, #584]	@ (8002164 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d046      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f20:	4a90      	ldr	r2, [pc, #576]	@ (8002164 <HAL_GPIO_Init+0x2b0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d85d      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d82a      	bhi.n	8001f80 <HAL_GPIO_Init+0xcc>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d859      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <HAL_GPIO_Init+0x80>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f9b 	.word	0x08001f9b
 8001f40:	08001fdd 	.word	0x08001fdd
 8001f44:	08001fe3 	.word	0x08001fe3
 8001f48:	08001fe3 	.word	0x08001fe3
 8001f4c:	08001fe3 	.word	0x08001fe3
 8001f50:	08001fe3 	.word	0x08001fe3
 8001f54:	08001fe3 	.word	0x08001fe3
 8001f58:	08001fe3 	.word	0x08001fe3
 8001f5c:	08001fe3 	.word	0x08001fe3
 8001f60:	08001fe3 	.word	0x08001fe3
 8001f64:	08001fe3 	.word	0x08001fe3
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fe3 	.word	0x08001fe3
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	08001fe3 	.word	0x08001fe3
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	4a79      	ldr	r2, [pc, #484]	@ (8002168 <HAL_GPIO_Init+0x2b4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e02c      	b.n	8001fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e029      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3304      	adds	r3, #4
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e024      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e01f      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e01a      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e013      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	611a      	str	r2, [r3, #16]
          break;
 8001fce:	e009      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	615a      	str	r2, [r3, #20]
          break;
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          break;
 8001fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	@ 0xff
 8001fe8:	d801      	bhi.n	8001fee <HAL_GPIO_Init+0x13a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_Init+0x13e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	@ 0xff
 8001ff8:	d802      	bhi.n	8002000 <HAL_GPIO_Init+0x14c>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x152>
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	3b08      	subs	r3, #8
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	210f      	movs	r1, #15
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	6a39      	ldr	r1, [r7, #32]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80b1 	beq.w	8002196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002034:	4b4d      	ldr	r3, [pc, #308]	@ (800216c <HAL_GPIO_Init+0x2b8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_GPIO_Init+0x2b8>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <HAL_GPIO_Init+0x2b8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800204c:	4a48      	ldr	r2, [pc, #288]	@ (8002170 <HAL_GPIO_Init+0x2bc>)
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a40      	ldr	r2, [pc, #256]	@ (8002174 <HAL_GPIO_Init+0x2c0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_GPIO_Init+0x1ec>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3f      	ldr	r2, [pc, #252]	@ (8002178 <HAL_GPIO_Init+0x2c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00d      	beq.n	800209c <HAL_GPIO_Init+0x1e8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3e      	ldr	r2, [pc, #248]	@ (800217c <HAL_GPIO_Init+0x2c8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x1e4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3d      	ldr	r2, [pc, #244]	@ (8002180 <HAL_GPIO_Init+0x2cc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_GPIO_Init+0x1e0>
 8002090:	2303      	movs	r3, #3
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002094:	2304      	movs	r3, #4
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002098:	2302      	movs	r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 80020a0:	2300      	movs	r3, #0
 80020a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b2:	492f      	ldr	r1, [pc, #188]	@ (8002170 <HAL_GPIO_Init+0x2bc>)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	492c      	ldr	r1, [pc, #176]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4928      	ldr	r1, [pc, #160]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f4:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4922      	ldr	r1, [pc, #136]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	491e      	ldr	r1, [pc, #120]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800210c:	4013      	ands	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4918      	ldr	r1, [pc, #96]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4914      	ldr	r1, [pc, #80]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d021      	beq.n	8002188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	490e      	ldr	r1, [pc, #56]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e021      	b.n	8002196 <HAL_GPIO_Init+0x2e2>
 8002152:	bf00      	nop
 8002154:	10320000 	.word	0x10320000
 8002158:	10310000 	.word	0x10310000
 800215c:	10220000 	.word	0x10220000
 8002160:	10210000 	.word	0x10210000
 8002164:	10120000 	.word	0x10120000
 8002168:	10110000 	.word	0x10110000
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	40010800 	.word	0x40010800
 8002178:	40010c00 	.word	0x40010c00
 800217c:	40011000 	.word	0x40011000
 8002180:	40011400 	.word	0x40011400
 8002184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_GPIO_Init+0x304>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4909      	ldr	r1, [pc, #36]	@ (80021b8 <HAL_GPIO_Init+0x304>)
 8002192:	4013      	ands	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae8e 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	372c      	adds	r7, #44	@ 0x2c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e12b      	b.n	8002456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fa28 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2224      	movs	r2, #36	@ 0x24
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800223e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800224e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002250:	f001 fbfc 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8002254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a81      	ldr	r2, [pc, #516]	@ (8002460 <HAL_I2C_Init+0x274>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d807      	bhi.n	8002270 <HAL_I2C_Init+0x84>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a80      	ldr	r2, [pc, #512]	@ (8002464 <HAL_I2C_Init+0x278>)
 8002264:	4293      	cmp	r3, r2
 8002266:	bf94      	ite	ls
 8002268:	2301      	movls	r3, #1
 800226a:	2300      	movhi	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e006      	b.n	800227e <HAL_I2C_Init+0x92>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a7d      	ldr	r2, [pc, #500]	@ (8002468 <HAL_I2C_Init+0x27c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0e7      	b.n	8002456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a78      	ldr	r2, [pc, #480]	@ (800246c <HAL_I2C_Init+0x280>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0c9b      	lsrs	r3, r3, #18
 8002290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002460 <HAL_I2C_Init+0x274>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d802      	bhi.n	80022c0 <HAL_I2C_Init+0xd4>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	3301      	adds	r3, #1
 80022be:	e009      	b.n	80022d4 <HAL_I2C_Init+0xe8>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	4a69      	ldr	r2, [pc, #420]	@ (8002470 <HAL_I2C_Init+0x284>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	3301      	adds	r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	430b      	orrs	r3, r1
 80022da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	495c      	ldr	r1, [pc, #368]	@ (8002460 <HAL_I2C_Init+0x274>)
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d819      	bhi.n	8002328 <HAL_I2C_Init+0x13c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e59      	subs	r1, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002302:	1c59      	adds	r1, r3, #1
 8002304:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002308:	400b      	ands	r3, r1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_I2C_Init+0x138>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1e59      	subs	r1, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fbb1 f3f3 	udiv	r3, r1, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002322:	e051      	b.n	80023c8 <HAL_I2C_Init+0x1dc>
 8002324:	2304      	movs	r3, #4
 8002326:	e04f      	b.n	80023c8 <HAL_I2C_Init+0x1dc>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d111      	bne.n	8002354 <HAL_I2C_Init+0x168>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1e58      	subs	r0, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	e012      	b.n	800237a <HAL_I2C_Init+0x18e>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	0099      	lsls	r1, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Init+0x196>
 800237e:	2301      	movs	r3, #1
 8002380:	e022      	b.n	80023c8 <HAL_I2C_Init+0x1dc>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10e      	bne.n	80023a8 <HAL_I2C_Init+0x1bc>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1e58      	subs	r0, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	440b      	add	r3, r1
 8002398:	fbb0 f3f3 	udiv	r3, r0, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a6:	e00f      	b.n	80023c8 <HAL_I2C_Init+0x1dc>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	6809      	ldr	r1, [r1, #0]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6911      	ldr	r1, [r2, #16]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68d2      	ldr	r2, [r2, #12]
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	000186a0 	.word	0x000186a0
 8002464:	001e847f 	.word	0x001e847f
 8002468:	003d08ff 	.word	0x003d08ff
 800246c:	431bde83 	.word	0x431bde83
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4603      	mov	r3, r0
 8002484:	817b      	strh	r3, [r7, #10]
 8002486:	460b      	mov	r3, r1
 8002488:	813b      	strh	r3, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff fb23 	bl	8001ad8 <HAL_GetTick>
 8002492:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	f040 80d9 	bne.w	8002654 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2319      	movs	r3, #25
 80024a8:	2201      	movs	r2, #1
 80024aa:	496d      	ldr	r1, [pc, #436]	@ (8002660 <HAL_I2C_Mem_Write+0x1ec>)
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fccd 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0cc      	b.n	8002656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Mem_Write+0x56>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e0c5      	b.n	8002656 <HAL_I2C_Mem_Write+0x1e2>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d007      	beq.n	80024f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2221      	movs	r2, #33	@ 0x21
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a4d      	ldr	r2, [pc, #308]	@ (8002664 <HAL_I2C_Mem_Write+0x1f0>)
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002532:	88f8      	ldrh	r0, [r7, #6]
 8002534:	893a      	ldrh	r2, [r7, #8]
 8002536:	8979      	ldrh	r1, [r7, #10]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4603      	mov	r3, r0
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fb04 	bl	8002b50 <I2C_RequestMemoryWrite>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d052      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e081      	b.n	8002656 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fd92 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	2b04      	cmp	r3, #4
 8002568:	d107      	bne.n	800257a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06b      	b.n	8002656 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d11b      	bne.n	80025f4 <HAL_I2C_Mem_Write+0x180>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d017      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1aa      	bne.n	8002552 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fd85 	bl	8003110 <I2C_WaitOnBTFFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	2b04      	cmp	r3, #4
 8002612:	d107      	bne.n	8002624 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002622:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e016      	b.n	8002656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	00100002 	.word	0x00100002
 8002664:	ffff0000 	.word	0xffff0000

08002668 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	@ 0x30
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	4608      	mov	r0, r1
 8002672:	4611      	mov	r1, r2
 8002674:	461a      	mov	r2, r3
 8002676:	4603      	mov	r3, r0
 8002678:	817b      	strh	r3, [r7, #10]
 800267a:	460b      	mov	r3, r1
 800267c:	813b      	strh	r3, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002686:	f7ff fa27 	bl	8001ad8 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b20      	cmp	r3, #32
 8002696:	f040 8250 	bne.w	8002b3a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2319      	movs	r3, #25
 80026a0:	2201      	movs	r2, #1
 80026a2:	4982      	ldr	r1, [pc, #520]	@ (80028ac <HAL_I2C_Mem_Read+0x244>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fbd1 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
 80026b2:	e243      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x5a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e23c      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d007      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2222      	movs	r2, #34	@ 0x22
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a62      	ldr	r2, [pc, #392]	@ (80028b0 <HAL_I2C_Mem_Read+0x248>)
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272a:	88f8      	ldrh	r0, [r7, #6]
 800272c:	893a      	ldrh	r2, [r7, #8]
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4603      	mov	r3, r0
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fa9e 	bl	8002c7c <I2C_RequestMemoryRead>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1f8      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d113      	bne.n	800277a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e1cc      	b.n	8002b14 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	2b01      	cmp	r3, #1
 8002780:	d11e      	bne.n	80027c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002790:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002792:	b672      	cpsid	i
}
 8002794:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027bc:	b662      	cpsie	i
}
 80027be:	e035      	b.n	800282c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d11e      	bne.n	8002806 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002800:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002802:	b662      	cpsie	i
}
 8002804:	e012      	b.n	800282c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002814:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800282c:	e172      	b.n	8002b14 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	f200 811f 	bhi.w	8002a76 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d123      	bne.n	8002888 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fcab 	bl	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e173      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002886:	e145      	b.n	8002b14 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d152      	bne.n	8002936 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002896:	2200      	movs	r2, #0
 8002898:	4906      	ldr	r1, [pc, #24]	@ (80028b4 <HAL_I2C_Mem_Read+0x24c>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fad6 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e148      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028fe:	b662      	cpsie	i
}
 8002900:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002934:	e0ee      	b.n	8002b14 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	2200      	movs	r2, #0
 800293e:	4981      	ldr	r1, [pc, #516]	@ (8002b44 <HAL_I2C_Mem_Read+0x4dc>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa83 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0f5      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
}
 8002962:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002996:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_I2C_Mem_Read+0x4e0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	08db      	lsrs	r3, r3, #3
 800299c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b4c <HAL_I2C_Mem_Read+0x4e4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0a1a      	lsrs	r2, r3, #8
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00da      	lsls	r2, r3, #3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d118      	bne.n	80029ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029de:	b662      	cpsie	i
}
 80029e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0a6      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d1d9      	bne.n	80029b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a3e:	b662      	cpsie	i
}
 8002a40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a74:	e04e      	b.n	8002b14 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fb90 	bl	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e058      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d124      	bne.n	8002b14 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f ae88 	bne.w	800282e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	@ 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010004 	.word	0x00010004
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	14f8b589 	.word	0x14f8b589

08002b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f960 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba0:	d103      	bne.n	8002baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e05f      	b.n	8002c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	492d      	ldr	r1, [pc, #180]	@ (8002c78 <I2C_RequestMemoryWrite+0x128>)
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f9bb 	bl	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e04c      	b.n	8002c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa46 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02b      	b.n	8002c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	e021      	b.n	8002c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c28:	893b      	ldrh	r3, [r7, #8]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	6a39      	ldr	r1, [r7, #32]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fa20 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d107      	bne.n	8002c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e005      	b.n	8002c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c62:	893b      	ldrh	r3, [r7, #8]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	00010002 	.word	0x00010002

08002c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	817b      	strh	r3, [r7, #10]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	813b      	strh	r3, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f8c2 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cdc:	d103      	bne.n	8002ce6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0aa      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	4952      	ldr	r1, [pc, #328]	@ (8002e48 <I2C_RequestMemoryRead+0x1cc>)
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f91d 	bl	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e097      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f9a8 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d107      	bne.n	8002d4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e076      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	e021      	b.n	8002da8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d64:	893b      	ldrh	r3, [r7, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d74:	6a39      	ldr	r1, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f982 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d107      	bne.n	8002d9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e050      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002daa:	6a39      	ldr	r1, [r7, #32]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f967 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d107      	bne.n	8002dd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e035      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002de2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f82b 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e0a:	d103      	bne.n	8002e14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e013      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e18:	897b      	ldrh	r3, [r7, #10]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	4906      	ldr	r1, [pc, #24]	@ (8002e48 <I2C_RequestMemoryRead+0x1cc>)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f886 	bl	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	00010002 	.word	0x00010002

08002e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	e048      	b.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d044      	beq.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fe37 	bl	8001ad8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d139      	bne.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10d      	bne.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	e00c      	b.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d116      	bne.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e023      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d10d      	bne.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	e00c      	b.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d093      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f4e:	e071      	b.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5e:	d123      	bne.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e067      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d041      	beq.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb0:	f7fe fd92 	bl	8001ad8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d136      	bne.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10c      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e00b      	b.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e021      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10c      	bne.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e00b      	b.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4013      	ands	r3, r2
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af6d 	bne.w	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308c:	e034      	b.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8e3 	bl	800325a <I2C_IsAcknowledgeFailed>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e034      	b.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d028      	beq.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fe fd17 	bl	8001ad8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d11d      	bne.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c6:	2b80      	cmp	r3, #128	@ 0x80
 80030c8:	d016      	beq.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e007      	b.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b80      	cmp	r3, #128	@ 0x80
 8003104:	d1c3      	bne.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800311c:	e034      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f89b 	bl	800325a <I2C_IsAcknowledgeFailed>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e034      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d028      	beq.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe fccf 	bl	8001ad8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11d      	bne.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d016      	beq.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e007      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d1c3      	bne.n	800311e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ac:	e049      	b.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d119      	bne.n	80031f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0210 	mvn.w	r2, #16
 80031c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e030      	b.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7fe fc72 	bl	8001ad8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11d      	bne.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d016      	beq.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e007      	b.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324c:	2b40      	cmp	r3, #64	@ 0x40
 800324e:	d1ae      	bne.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003270:	d11b      	bne.n	80032aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800327a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e272      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8087 	beq.w	80033e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	4b92      	ldr	r3, [pc, #584]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d00c      	beq.n	80032fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d112      	bne.n	8003316 <HAL_RCC_OscConfig+0x5e>
 80032f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fc:	d10b      	bne.n	8003316 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fe:	4b89      	ldr	r3, [pc, #548]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x12c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d168      	bne.n	80033e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e24c      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x76>
 8003320:	4b80      	ldr	r3, [pc, #512]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a7f      	ldr	r2, [pc, #508]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	e02e      	b.n	800338c <HAL_RCC_OscConfig+0xd4>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x98>
 8003336:	4b7b      	ldr	r3, [pc, #492]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7a      	ldr	r2, [pc, #488]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b78      	ldr	r3, [pc, #480]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a77      	ldr	r2, [pc, #476]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003348:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e01d      	b.n	800338c <HAL_RCC_OscConfig+0xd4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0xbc>
 800335a:	4b72      	ldr	r3, [pc, #456]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a71      	ldr	r2, [pc, #452]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b6f      	ldr	r3, [pc, #444]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6e      	ldr	r2, [pc, #440]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0xd4>
 8003374:	4b6b      	ldr	r3, [pc, #428]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6a      	ldr	r2, [pc, #424]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a67      	ldr	r2, [pc, #412]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800338a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fba0 	bl	8001ad8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe fb9c 	bl	8001ad8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e200      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0xe4>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fb8c 	bl	8001ad8 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fe fb88 	bl	8001ad8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	@ 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e1ec      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	4b53      	ldr	r3, [pc, #332]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x10c>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d063      	beq.n	80034ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033fe:	4b49      	ldr	r3, [pc, #292]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b08      	cmp	r3, #8
 8003408:	d11c      	bne.n	8003444 <HAL_RCC_OscConfig+0x18c>
 800340a:	4b46      	ldr	r3, [pc, #280]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	4b43      	ldr	r3, [pc, #268]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x176>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e1c0      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342e:	4b3d      	ldr	r3, [pc, #244]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4939      	ldr	r1, [pc, #228]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	e03a      	b.n	80034ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344c:	4b36      	ldr	r3, [pc, #216]	@ (8003528 <HAL_RCC_OscConfig+0x270>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fe fb41 	bl	8001ad8 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345a:	f7fe fb3d 	bl	8001ad8 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1a1      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003478:	4b2a      	ldr	r3, [pc, #168]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4927      	ldr	r1, [pc, #156]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
 800348c:	e015      	b.n	80034ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348e:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <HAL_RCC_OscConfig+0x270>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fb20 	bl	8001ad8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349c:	f7fe fb1c 	bl	8001ad8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e180      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03a      	beq.n	800353c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d019      	beq.n	8003502 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ce:	4b17      	ldr	r3, [pc, #92]	@ (800352c <HAL_RCC_OscConfig+0x274>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fe fb00 	bl	8001ad8 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fe fafc 	bl	8001ad8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e160      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034fa:	2001      	movs	r0, #1
 80034fc:	f000 face 	bl	8003a9c <RCC_Delay>
 8003500:	e01c      	b.n	800353c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003502:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <HAL_RCC_OscConfig+0x274>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003508:	f7fe fae6 	bl	8001ad8 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350e:	e00f      	b.n	8003530 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003510:	f7fe fae2 	bl	8001ad8 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d908      	bls.n	8003530 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e146      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	42420000 	.word	0x42420000
 800352c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b92      	ldr	r3, [pc, #584]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e9      	bne.n	8003510 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a6 	beq.w	8003696 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b8b      	ldr	r3, [pc, #556]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10d      	bne.n	8003576 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	4b88      	ldr	r3, [pc, #544]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4a87      	ldr	r2, [pc, #540]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003564:	61d3      	str	r3, [r2, #28]
 8003566:	4b85      	ldr	r3, [pc, #532]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b82      	ldr	r3, [pc, #520]	@ (8003780 <HAL_RCC_OscConfig+0x4c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b7f      	ldr	r3, [pc, #508]	@ (8003780 <HAL_RCC_OscConfig+0x4c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7e      	ldr	r2, [pc, #504]	@ (8003780 <HAL_RCC_OscConfig+0x4c8>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fe faa3 	bl	8001ad8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fe fa9f 	bl	8001ad8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b64      	cmp	r3, #100	@ 0x64
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e103      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	4b75      	ldr	r3, [pc, #468]	@ (8003780 <HAL_RCC_OscConfig+0x4c8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x312>
 80035bc:	4b6f      	ldr	r3, [pc, #444]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4a6e      	ldr	r2, [pc, #440]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6213      	str	r3, [r2, #32]
 80035c8:	e02d      	b.n	8003626 <HAL_RCC_OscConfig+0x36e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x334>
 80035d2:	4b6a      	ldr	r3, [pc, #424]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a69      	ldr	r2, [pc, #420]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	4b67      	ldr	r3, [pc, #412]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a66      	ldr	r2, [pc, #408]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6213      	str	r3, [r2, #32]
 80035ea:	e01c      	b.n	8003626 <HAL_RCC_OscConfig+0x36e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d10c      	bne.n	800360e <HAL_RCC_OscConfig+0x356>
 80035f4:	4b61      	ldr	r3, [pc, #388]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a60      	ldr	r2, [pc, #384]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	4b5e      	ldr	r3, [pc, #376]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4a5d      	ldr	r2, [pc, #372]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0x36e>
 800360e:	4b5b      	ldr	r3, [pc, #364]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a5a      	ldr	r2, [pc, #360]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6213      	str	r3, [r2, #32]
 800361a:	4b58      	ldr	r3, [pc, #352]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a57      	ldr	r2, [pc, #348]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d015      	beq.n	800365a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe fa53 	bl	8001ad8 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fa4f 	bl	8001ad8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0b1      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	4b4b      	ldr	r3, [pc, #300]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ee      	beq.n	8003636 <HAL_RCC_OscConfig+0x37e>
 8003658:	e014      	b.n	8003684 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fe fa3d 	bl	8001ad8 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe fa39 	bl	8001ad8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e09b      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	4b40      	ldr	r3, [pc, #256]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ee      	bne.n	8003662 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4b3c      	ldr	r3, [pc, #240]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4a3b      	ldr	r2, [pc, #236]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003694:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8087 	beq.w	80037ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a0:	4b36      	ldr	r3, [pc, #216]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d061      	beq.n	8003770 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d146      	bne.n	8003742 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b4:	4b33      	ldr	r3, [pc, #204]	@ (8003784 <HAL_RCC_OscConfig+0x4cc>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe fa0d 	bl	8001ad8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fe fa09 	bl	8001ad8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e06d      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d4:	4b29      	ldr	r3, [pc, #164]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e8:	d108      	bne.n	80036fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ea:	4b24      	ldr	r3, [pc, #144]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4921      	ldr	r1, [pc, #132]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fc:	4b1f      	ldr	r3, [pc, #124]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a19      	ldr	r1, [r3, #32]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	430b      	orrs	r3, r1
 800370e:	491b      	ldr	r1, [pc, #108]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003714:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe f9dd 	bl	8001ad8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003722:	f7fe f9d9 	bl	8001ad8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e03d      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x46a>
 8003740:	e035      	b.n	80037ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <HAL_RCC_OscConfig+0x4cc>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe f9c6 	bl	8001ad8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe f9c2 	bl	8001ad8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e026      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_RCC_OscConfig+0x4c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x498>
 800376e:	e01e      	b.n	80037ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e019      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
 800377c:	40021000 	.word	0x40021000
 8003780:	40007000 	.word	0x40007000
 8003784:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003788:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <HAL_RCC_OscConfig+0x500>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	429a      	cmp	r2, r3
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0d0      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b67      	ldr	r3, [pc, #412]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4965      	ldr	r1, [pc, #404]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b63      	ldr	r3, [pc, #396]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b8      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a58      	ldr	r2, [pc, #352]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003830:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800383a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b50      	ldr	r3, [pc, #320]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	494d      	ldr	r1, [pc, #308]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d040      	beq.n	80038dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d115      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b41      	ldr	r3, [pc, #260]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e073      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06b      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4936      	ldr	r1, [pc, #216]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ac:	f7fe f914 	bl	8001ad8 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fe f910 	bl	8001ad8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e053      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b27      	ldr	r3, [pc, #156]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d210      	bcs.n	800390c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b24      	ldr	r3, [pc, #144]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 0207 	bic.w	r2, r3, #7
 80038f2:	4922      	ldr	r1, [pc, #136]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4916      	ldr	r1, [pc, #88]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	@ (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	@ (8003988 <HAL_RCC_ClockConfig+0x1cc>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_RCC_ClockConfig+0x1d0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe f872 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40022000 	.word	0x40022000
 8003980:	40021000 	.word	0x40021000
 8003984:	08006400 	.word	0x08006400
 8003988:	20000004 	.word	0x20000004
 800398c:	20000008 	.word	0x20000008

08003990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x36>
 80039be:	e027      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c0:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80039c2:	613b      	str	r3, [r7, #16]
      break;
 80039c4:	e027      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	0c9b      	lsrs	r3, r3, #18
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	4a17      	ldr	r2, [pc, #92]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039d0:	5cd3      	ldrb	r3, [r2, r3]
 80039d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039de:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0c5b      	lsrs	r3, r3, #17
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80039f2:	fb03 f202 	mul.w	r2, r3, r2
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e004      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	613b      	str	r3, [r7, #16]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a12:	613b      	str	r3, [r7, #16]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	693b      	ldr	r3, [r7, #16]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	007a1200 	.word	0x007a1200
 8003a2c:	08006418 	.word	0x08006418
 8003a30:	08006428 	.word	0x08006428
 8003a34:	003d0900 	.word	0x003d0900

08003a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a3c:	4b02      	ldr	r3, [pc, #8]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	20000004 	.word	0x20000004

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a50:	f7ff fff2 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08006410 	.word	0x08006410

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a78:	f7ff ffde 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	0adb      	lsrs	r3, r3, #11
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	@ (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	08006410 	.word	0x08006410

08003a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <RCC_Delay+0x34>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <RCC_Delay+0x38>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0a5b      	lsrs	r3, r3, #9
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab8:	bf00      	nop
  }
  while (Delay --);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	60fa      	str	r2, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <RCC_Delay+0x1c>
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	20000004 	.word	0x20000004
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fdf0 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 fab2 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e041      	b.n	8003c0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f839 	bl	8003c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f000 fa63 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_TIM_PWM_Start+0x24>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e022      	b.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d109      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x3e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e015      	b.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d109      	bne.n	8003c80 <HAL_TIM_PWM_Start+0x58>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e008      	b.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e05e      	b.n	8003d58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_PWM_Start+0x82>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ca8:	e013      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start+0x92>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cb8:	e00b      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start+0xa2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc8:	e003      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fc5c 	bl	8004598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <HAL_TIM_PWM_Start+0x138>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_TIM_PWM_Start+0x138>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_TIM_PWM_Start+0xfa>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d009      	beq.n	8003d22 <HAL_TIM_PWM_Start+0xfa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <HAL_TIM_PWM_Start+0x13c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_TIM_PWM_Start+0xfa>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <HAL_TIM_PWM_Start+0x140>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d111      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b06      	cmp	r3, #6
 8003d32:	d010      	beq.n	8003d56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	e007      	b.n	8003d56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800

08003d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0ae      	b.n	8003ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	f200 809f 	bhi.w	8003ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003ed9 	.word	0x08003ed9
 8003da8:	08003ed9 	.word	0x08003ed9
 8003dac:	08003ed9 	.word	0x08003ed9
 8003db0:	08003e15 	.word	0x08003e15
 8003db4:	08003ed9 	.word	0x08003ed9
 8003db8:	08003ed9 	.word	0x08003ed9
 8003dbc:	08003ed9 	.word	0x08003ed9
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003ed9 	.word	0x08003ed9
 8003dc8:	08003ed9 	.word	0x08003ed9
 8003dcc:	08003ed9 	.word	0x08003ed9
 8003dd0:	08003e97 	.word	0x08003e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f9be 	bl	800415c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0204 	bic.w	r2, r2, #4
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
      break;
 8003e12:	e064      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa04 	bl	8004228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6999      	ldr	r1, [r3, #24]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	619a      	str	r2, [r3, #24]
      break;
 8003e54:	e043      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa4d 	bl	80042fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0208 	orr.w	r2, r2, #8
 8003e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69d9      	ldr	r1, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
      break;
 8003e94:	e023      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fa97 	bl	80043d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69d9      	ldr	r1, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
      break;
 8003edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIM_ConfigClockSource+0x1c>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0b4      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x186>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f44:	d03e      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f4a:	f200 8087 	bhi.w	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	f000 8086 	beq.w	8004062 <HAL_TIM_ConfigClockSource+0x172>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5a:	d87f      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b70      	cmp	r3, #112	@ 0x70
 8003f5e:	d01a      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0xa6>
 8003f60:	2b70      	cmp	r3, #112	@ 0x70
 8003f62:	d87b      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b60      	cmp	r3, #96	@ 0x60
 8003f66:	d050      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x11a>
 8003f68:	2b60      	cmp	r3, #96	@ 0x60
 8003f6a:	d877      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b50      	cmp	r3, #80	@ 0x50
 8003f6e:	d03c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0xfa>
 8003f70:	2b50      	cmp	r3, #80	@ 0x50
 8003f72:	d873      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d058      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x13a>
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d86f      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b30      	cmp	r3, #48	@ 0x30
 8003f7e:	d064      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	2b30      	cmp	r3, #48	@ 0x30
 8003f82:	d86b      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d060      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d867      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d05a      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f94:	e062      	b.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa6:	f000 fad8 	bl	800455a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	609a      	str	r2, [r3, #8]
      break;
 8003fc2:	e04f      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd4:	f000 fac1 	bl	800455a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fe6:	609a      	str	r2, [r3, #8]
      break;
 8003fe8:	e03c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 fa38 	bl	800446c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2150      	movs	r1, #80	@ 0x50
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fa8f 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 8004008:	e02c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004016:	461a      	mov	r2, r3
 8004018:	f000 fa56 	bl	80044c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2160      	movs	r1, #96	@ 0x60
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fa7f 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 8004028:	e01c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 fa18 	bl	800446c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2140      	movs	r1, #64	@ 0x40
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fa6f 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 8004048:	e00c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f000 fa66 	bl	8004526 <TIM_ITRx_SetConfig>
      break;
 800405a:	e003      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      break;
 8004060:	e000      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2f      	ldr	r2, [pc, #188]	@ (8004150 <TIM_Base_SetConfig+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x30>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x30>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004154 <TIM_Base_SetConfig+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x30>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004158 <TIM_Base_SetConfig+0xd8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <TIM_Base_SetConfig+0xd0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <TIM_Base_SetConfig+0xd4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x62>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004158 <TIM_Base_SetConfig+0xd8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0d      	ldr	r2, [pc, #52]	@ (8004150 <TIM_Base_SetConfig+0xd0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d103      	bne.n	8004128 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	611a      	str	r2, [r3, #16]
  }
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800

0800415c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f023 0201 	bic.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004224 <TIM_OC1_SetConfig+0xc8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10c      	bne.n	80041d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0308 	bic.w	r3, r3, #8
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <TIM_OC1_SetConfig+0xc8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00

08004228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0210 	bic.w	r2, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0320 	bic.w	r3, r3, #32
 8004272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1d      	ldr	r2, [pc, #116]	@ (80042f8 <TIM_OC2_SetConfig+0xd0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10d      	bne.n	80042a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a14      	ldr	r2, [pc, #80]	@ (80042f8 <TIM_OC2_SetConfig+0xd0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d113      	bne.n	80042d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00

080042fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <TIM_OC3_SetConfig+0xd0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d10d      	bne.n	8004376 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <TIM_OC3_SetConfig+0xd0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d113      	bne.n	80043a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40012c00 	.word	0x40012c00

080043d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800441a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	031b      	lsls	r3, r3, #12
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a0f      	ldr	r2, [pc, #60]	@ (8004468 <TIM_OC4_SetConfig+0x98>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d109      	bne.n	8004444 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40012c00 	.word	0x40012c00

0800446c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 030a 	bic.w	r3, r3, #10
 80044a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	031b      	lsls	r3, r3, #12
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	f043 0307 	orr.w	r3, r3, #7
 8004548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800455a:	b480      	push	{r7}
 800455c:	b087      	sub	sp, #28
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004574:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	021a      	lsls	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	431a      	orrs	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	609a      	str	r2, [r3, #8]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2201      	movs	r2, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr

080045e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e046      	b.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a16      	ldr	r2, [pc, #88]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d009      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a10      	ldr	r2, [pc, #64]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10c      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	4313      	orrs	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800

0800469c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e042      	b.n	8004734 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd f85a 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	@ 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fcd5 	bl	8005090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	d112      	bne.n	800477c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_UART_Receive_IT+0x26>
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e00b      	b.n	800477e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	461a      	mov	r2, r3
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fab7 	bl	8004ce6 <UART_Start_Receive_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	e000      	b.n	800477e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b0ba      	sub	sp, #232	@ 0xe8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_UART_IRQHandler+0x66>
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fb93 	bl	8004f12 <UART_Receive_IT>
      return;
 80047ec:	e25b      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80de 	beq.w	80049b4 <HAL_UART_IRQHandler+0x22c>
 80047f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004808:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80d1 	beq.w	80049b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <HAL_UART_IRQHandler+0xae>
 800481e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_UART_IRQHandler+0xd2>
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f043 0202 	orr.w	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <HAL_UART_IRQHandler+0xf6>
 8004866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <HAL_UART_IRQHandler+0x126>
 800488a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f043 0208 	orr.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 81f2 	beq.w	8004c9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_UART_IRQHandler+0x14e>
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fb1e 	bl	8004f12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <HAL_UART_IRQHandler+0x17a>
 80048fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04f      	beq.n	80049a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa28 	bl	8004d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d041      	beq.n	800499a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800492c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800494e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800495a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1d9      	bne.n	8004916 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d013      	beq.n	8004992 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b68 <HAL_UART_IRQHandler+0x3e0>)
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004976:	4618      	mov	r0, r3
 8004978:	f7fd fa24 	bl	8001dc4 <HAL_DMA_Abort_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800498c:	4610      	mov	r0, r2
 800498e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	e00e      	b.n	80049b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f993 	bl	8004cbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	e00a      	b.n	80049b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f98f 	bl	8004cbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	e006      	b.n	80049b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f98b 	bl	8004cbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049ae:	e175      	b.n	8004c9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	bf00      	nop
    return;
 80049b2:	e173      	b.n	8004c9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 814f 	bne.w	8004c5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8148 	beq.w	8004c5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8141 	beq.w	8004c5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b6 	beq.w	8004b6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8145 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	f080 813e 	bcs.w	8004ca0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f000 8088 	beq.w	8004b48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1d9      	bne.n	8004a38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aa8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e1      	bne.n	8004a84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ae4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e3      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e3      	bne.n	8004b06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd f903 	bl	8001d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8b6 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b64:	e09c      	b.n	8004ca0 <HAL_UART_IRQHandler+0x518>
 8004b66:	bf00      	nop
 8004b68:	08004e1d 	.word	0x08004e1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 808e 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8089 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e3      	bne.n	8004b92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3314      	adds	r3, #20
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3314      	adds	r3, #20
 8004bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bee:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e3      	bne.n	8004bca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0310 	bic.w	r3, r3, #16
 8004c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	617b      	str	r3, [r7, #20]
   return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e3      	bne.n	8004c10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f83b 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c5a:	e023      	b.n	8004ca4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_UART_IRQHandler+0x4f4>
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8e5 	bl	8004e44 <UART_Transmit_IT>
    return;
 8004c7a:	e014      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f924 	bl	8004ee2 <UART_EndTransmit_IT>
    return;
 8004c9a:	e004      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ca4:	bf00      	nop
  }
}
 8004ca6:	37e8      	adds	r7, #232	@ 0xe8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2222      	movs	r2, #34	@ 0x22
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d2a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0220 	orr.w	r2, r2, #32
 8004d4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b095      	sub	sp, #84	@ 0x54
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d80:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3314      	adds	r3, #20
 8004db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e5      	bne.n	8004d94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d119      	bne.n	8004e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f023 0310 	bic.w	r3, r3, #16
 8004de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004df0:	61ba      	str	r2, [r7, #24]
 8004df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e5      	bne.n	8004dd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e12:	bf00      	nop
 8004e14:	3754      	adds	r7, #84	@ 0x54
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff ff41 	bl	8004cbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b21      	cmp	r3, #33	@ 0x21
 8004e56:	d13e      	bne.n	8004ed6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e60:	d114      	bne.n	8004e8c <UART_Transmit_IT+0x48>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d110      	bne.n	8004e8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]
 8004e8a:	e008      	b.n	8004e9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	1c59      	adds	r1, r3, #1
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6211      	str	r1, [r2, #32]
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ec0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ed0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fed2 	bl	8004cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b08c      	sub	sp, #48	@ 0x30
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b22      	cmp	r3, #34	@ 0x22
 8004f24:	f040 80ae 	bne.w	8005084 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f30:	d117      	bne.n	8004f62 <UART_Receive_IT+0x50>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d113      	bne.n	8004f62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f60:	e026      	b.n	8004fb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f74:	d007      	beq.n	8004f86 <UART_Receive_IT+0x74>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <UART_Receive_IT+0x82>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	e008      	b.n	8004fa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d15d      	bne.n	8005080 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0220 	bic.w	r2, r2, #32
 8004fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	2b01      	cmp	r3, #1
 8005008:	d135      	bne.n	8005076 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	613b      	str	r3, [r7, #16]
   return(result);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f023 0310 	bic.w	r3, r3, #16
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	623a      	str	r2, [r7, #32]
 8005032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	61bb      	str	r3, [r7, #24]
   return(result);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b10      	cmp	r3, #16
 8005050:	d10a      	bne.n	8005068 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fe2e 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
 8005074:	e002      	b.n	800507c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fb fcb0 	bl	80009dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e002      	b.n	8005086 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3730      	adds	r7, #48	@ 0x30
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050ca:	f023 030c 	bic.w	r3, r3, #12
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <UART_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7fe fcbc 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	e002      	b.n	8005106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fe fca4 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8005104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	4a22      	ldr	r2, [pc, #136]	@ (80051a8 <UART_SetConfig+0x118>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	0119      	lsls	r1, r3, #4
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	fbb2 f2f3 	udiv	r2, r2, r3
 800513c:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <UART_SetConfig+0x118>)
 800513e:	fba3 0302 	umull	r0, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2064      	movs	r0, #100	@ 0x64
 8005146:	fb00 f303 	mul.w	r3, r0, r3
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	3332      	adds	r3, #50	@ 0x32
 8005150:	4a15      	ldr	r2, [pc, #84]	@ (80051a8 <UART_SetConfig+0x118>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800515c:	4419      	add	r1, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009a      	lsls	r2, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	fbb2 f2f3 	udiv	r2, r2, r3
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <UART_SetConfig+0x118>)
 8005176:	fba3 0302 	umull	r0, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2064      	movs	r0, #100	@ 0x64
 800517e:	fb00 f303 	mul.w	r3, r0, r3
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	3332      	adds	r3, #50	@ 0x32
 8005188:	4a07      	ldr	r2, [pc, #28]	@ (80051a8 <UART_SetConfig+0x118>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	440a      	add	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40013800 	.word	0x40013800
 80051a8:	51eb851f 	.word	0x51eb851f

080051ac <std>:
 80051ac:	2300      	movs	r3, #0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	e9c0 3300 	strd	r3, r3, [r0]
 80051b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ba:	6083      	str	r3, [r0, #8]
 80051bc:	8181      	strh	r1, [r0, #12]
 80051be:	6643      	str	r3, [r0, #100]	@ 0x64
 80051c0:	81c2      	strh	r2, [r0, #14]
 80051c2:	6183      	str	r3, [r0, #24]
 80051c4:	4619      	mov	r1, r3
 80051c6:	2208      	movs	r2, #8
 80051c8:	305c      	adds	r0, #92	@ 0x5c
 80051ca:	f000 f906 	bl	80053da <memset>
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <std+0x58>)
 80051d0:	6224      	str	r4, [r4, #32]
 80051d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80051d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005208 <std+0x5c>)
 80051d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <std+0x60>)
 80051da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <std+0x64>)
 80051de:	6323      	str	r3, [r4, #48]	@ 0x30
 80051e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <std+0x68>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d006      	beq.n	80051f4 <std+0x48>
 80051e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ea:	4294      	cmp	r4, r2
 80051ec:	d002      	beq.n	80051f4 <std+0x48>
 80051ee:	33d0      	adds	r3, #208	@ 0xd0
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d105      	bne.n	8005200 <std+0x54>
 80051f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051fc:	f000 b966 	b.w	80054cc <__retarget_lock_init_recursive>
 8005200:	bd10      	pop	{r4, pc}
 8005202:	bf00      	nop
 8005204:	08005355 	.word	0x08005355
 8005208:	08005377 	.word	0x08005377
 800520c:	080053af 	.word	0x080053af
 8005210:	080053d3 	.word	0x080053d3
 8005214:	200001c8 	.word	0x200001c8

08005218 <stdio_exit_handler>:
 8005218:	4a02      	ldr	r2, [pc, #8]	@ (8005224 <stdio_exit_handler+0xc>)
 800521a:	4903      	ldr	r1, [pc, #12]	@ (8005228 <stdio_exit_handler+0x10>)
 800521c:	4803      	ldr	r0, [pc, #12]	@ (800522c <stdio_exit_handler+0x14>)
 800521e:	f000 b869 	b.w	80052f4 <_fwalk_sglue>
 8005222:	bf00      	nop
 8005224:	20000010 	.word	0x20000010
 8005228:	08005d61 	.word	0x08005d61
 800522c:	20000020 	.word	0x20000020

08005230 <cleanup_stdio>:
 8005230:	6841      	ldr	r1, [r0, #4]
 8005232:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <cleanup_stdio+0x34>)
 8005234:	b510      	push	{r4, lr}
 8005236:	4299      	cmp	r1, r3
 8005238:	4604      	mov	r4, r0
 800523a:	d001      	beq.n	8005240 <cleanup_stdio+0x10>
 800523c:	f000 fd90 	bl	8005d60 <_fflush_r>
 8005240:	68a1      	ldr	r1, [r4, #8]
 8005242:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <cleanup_stdio+0x38>)
 8005244:	4299      	cmp	r1, r3
 8005246:	d002      	beq.n	800524e <cleanup_stdio+0x1e>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fd89 	bl	8005d60 <_fflush_r>
 800524e:	68e1      	ldr	r1, [r4, #12]
 8005250:	4b06      	ldr	r3, [pc, #24]	@ (800526c <cleanup_stdio+0x3c>)
 8005252:	4299      	cmp	r1, r3
 8005254:	d004      	beq.n	8005260 <cleanup_stdio+0x30>
 8005256:	4620      	mov	r0, r4
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	f000 bd80 	b.w	8005d60 <_fflush_r>
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	200001c8 	.word	0x200001c8
 8005268:	20000230 	.word	0x20000230
 800526c:	20000298 	.word	0x20000298

08005270 <global_stdio_init.part.0>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <global_stdio_init.part.0+0x30>)
 8005274:	4c0b      	ldr	r4, [pc, #44]	@ (80052a4 <global_stdio_init.part.0+0x34>)
 8005276:	4a0c      	ldr	r2, [pc, #48]	@ (80052a8 <global_stdio_init.part.0+0x38>)
 8005278:	4620      	mov	r0, r4
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	2104      	movs	r1, #4
 800527e:	2200      	movs	r2, #0
 8005280:	f7ff ff94 	bl	80051ac <std>
 8005284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005288:	2201      	movs	r2, #1
 800528a:	2109      	movs	r1, #9
 800528c:	f7ff ff8e 	bl	80051ac <std>
 8005290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005294:	2202      	movs	r2, #2
 8005296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529a:	2112      	movs	r1, #18
 800529c:	f7ff bf86 	b.w	80051ac <std>
 80052a0:	20000300 	.word	0x20000300
 80052a4:	200001c8 	.word	0x200001c8
 80052a8:	08005219 	.word	0x08005219

080052ac <__sfp_lock_acquire>:
 80052ac:	4801      	ldr	r0, [pc, #4]	@ (80052b4 <__sfp_lock_acquire+0x8>)
 80052ae:	f000 b90e 	b.w	80054ce <__retarget_lock_acquire_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000309 	.word	0x20000309

080052b8 <__sfp_lock_release>:
 80052b8:	4801      	ldr	r0, [pc, #4]	@ (80052c0 <__sfp_lock_release+0x8>)
 80052ba:	f000 b909 	b.w	80054d0 <__retarget_lock_release_recursive>
 80052be:	bf00      	nop
 80052c0:	20000309 	.word	0x20000309

080052c4 <__sinit>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
 80052c8:	f7ff fff0 	bl	80052ac <__sfp_lock_acquire>
 80052cc:	6a23      	ldr	r3, [r4, #32]
 80052ce:	b11b      	cbz	r3, 80052d8 <__sinit+0x14>
 80052d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d4:	f7ff bff0 	b.w	80052b8 <__sfp_lock_release>
 80052d8:	4b04      	ldr	r3, [pc, #16]	@ (80052ec <__sinit+0x28>)
 80052da:	6223      	str	r3, [r4, #32]
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__sinit+0x2c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f5      	bne.n	80052d0 <__sinit+0xc>
 80052e4:	f7ff ffc4 	bl	8005270 <global_stdio_init.part.0>
 80052e8:	e7f2      	b.n	80052d0 <__sinit+0xc>
 80052ea:	bf00      	nop
 80052ec:	08005231 	.word	0x08005231
 80052f0:	20000300 	.word	0x20000300

080052f4 <_fwalk_sglue>:
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	4607      	mov	r7, r0
 80052fa:	4688      	mov	r8, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	2600      	movs	r6, #0
 8005300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005304:	f1b9 0901 	subs.w	r9, r9, #1
 8005308:	d505      	bpl.n	8005316 <_fwalk_sglue+0x22>
 800530a:	6824      	ldr	r4, [r4, #0]
 800530c:	2c00      	cmp	r4, #0
 800530e:	d1f7      	bne.n	8005300 <_fwalk_sglue+0xc>
 8005310:	4630      	mov	r0, r6
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d907      	bls.n	800532c <_fwalk_sglue+0x38>
 800531c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005320:	3301      	adds	r3, #1
 8005322:	d003      	beq.n	800532c <_fwalk_sglue+0x38>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	47c0      	blx	r8
 800532a:	4306      	orrs	r6, r0
 800532c:	3568      	adds	r5, #104	@ 0x68
 800532e:	e7e9      	b.n	8005304 <_fwalk_sglue+0x10>

08005330 <iprintf>:
 8005330:	b40f      	push	{r0, r1, r2, r3}
 8005332:	b507      	push	{r0, r1, r2, lr}
 8005334:	4906      	ldr	r1, [pc, #24]	@ (8005350 <iprintf+0x20>)
 8005336:	ab04      	add	r3, sp, #16
 8005338:	6808      	ldr	r0, [r1, #0]
 800533a:	f853 2b04 	ldr.w	r2, [r3], #4
 800533e:	6881      	ldr	r1, [r0, #8]
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	f000 f9e5 	bl	8005710 <_vfiprintf_r>
 8005346:	b003      	add	sp, #12
 8005348:	f85d eb04 	ldr.w	lr, [sp], #4
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr
 8005350:	2000001c 	.word	0x2000001c

08005354 <__sread>:
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f868 	bl	8005430 <_read_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	bfab      	itete	ge
 8005364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005366:	89a3      	ldrhlt	r3, [r4, #12]
 8005368:	181b      	addge	r3, r3, r0
 800536a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800536e:	bfac      	ite	ge
 8005370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005372:	81a3      	strhlt	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__swrite>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	461f      	mov	r7, r3
 800537c:	898b      	ldrh	r3, [r1, #12]
 800537e:	4605      	mov	r5, r0
 8005380:	05db      	lsls	r3, r3, #23
 8005382:	460c      	mov	r4, r1
 8005384:	4616      	mov	r6, r2
 8005386:	d505      	bpl.n	8005394 <__swrite+0x1e>
 8005388:	2302      	movs	r3, #2
 800538a:	2200      	movs	r2, #0
 800538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005390:	f000 f83c 	bl	800540c <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	4632      	mov	r2, r6
 8005398:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	4628      	mov	r0, r5
 80053a0:	463b      	mov	r3, r7
 80053a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	f000 b853 	b.w	8005454 <_write_r>

080053ae <__sseek>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 f829 	bl	800540c <_lseek_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	bf15      	itete	ne
 80053c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ca:	81a3      	strheq	r3, [r4, #12]
 80053cc:	bf18      	it	ne
 80053ce:	81a3      	strhne	r3, [r4, #12]
 80053d0:	bd10      	pop	{r4, pc}

080053d2 <__sclose>:
 80053d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d6:	f000 b809 	b.w	80053ec <_close_r>

080053da <memset>:
 80053da:	4603      	mov	r3, r0
 80053dc:	4402      	add	r2, r0
 80053de:	4293      	cmp	r3, r2
 80053e0:	d100      	bne.n	80053e4 <memset+0xa>
 80053e2:	4770      	bx	lr
 80053e4:	f803 1b01 	strb.w	r1, [r3], #1
 80053e8:	e7f9      	b.n	80053de <memset+0x4>
	...

080053ec <_close_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	2300      	movs	r3, #0
 80053f0:	4d05      	ldr	r5, [pc, #20]	@ (8005408 <_close_r+0x1c>)
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fc fa83 	bl	8001902 <_close>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_close_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_close_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20000304 	.word	0x20000304

0800540c <_lseek_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	2200      	movs	r2, #0
 8005416:	4d05      	ldr	r5, [pc, #20]	@ (800542c <_lseek_r+0x20>)
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fc fa95 	bl	800194a <_lseek>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_lseek_r+0x1e>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_lseek_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	20000304 	.word	0x20000304

08005430 <_read_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	2200      	movs	r2, #0
 800543a:	4d05      	ldr	r5, [pc, #20]	@ (8005450 <_read_r+0x20>)
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fc fa26 	bl	8001890 <_read>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_read_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_read_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20000304 	.word	0x20000304

08005454 <_write_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	2200      	movs	r2, #0
 800545e:	4d05      	ldr	r5, [pc, #20]	@ (8005474 <_write_r+0x20>)
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fc fa31 	bl	80018ca <_write>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_write_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_write_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000304 	.word	0x20000304

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	@ (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	2000001c 	.word	0x2000001c

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	2600      	movs	r6, #0
 8005488:	4d0c      	ldr	r5, [pc, #48]	@ (80054bc <__libc_init_array+0x38>)
 800548a:	4c0d      	ldr	r4, [pc, #52]	@ (80054c0 <__libc_init_array+0x3c>)
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	f000 ffa0 	bl	80063d8 <_init>
 8005498:	2600      	movs	r6, #0
 800549a:	4d0a      	ldr	r5, [pc, #40]	@ (80054c4 <__libc_init_array+0x40>)
 800549c:	4c0a      	ldr	r4, [pc, #40]	@ (80054c8 <__libc_init_array+0x44>)
 800549e:	1b64      	subs	r4, r4, r5
 80054a0:	10a4      	asrs	r4, r4, #2
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	08006498 	.word	0x08006498
 80054c0:	08006498 	.word	0x08006498
 80054c4:	08006498 	.word	0x08006498
 80054c8:	0800649c 	.word	0x0800649c

080054cc <__retarget_lock_init_recursive>:
 80054cc:	4770      	bx	lr

080054ce <__retarget_lock_acquire_recursive>:
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_release_recursive>:
 80054d0:	4770      	bx	lr
	...

080054d4 <_free_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4605      	mov	r5, r0
 80054d8:	2900      	cmp	r1, #0
 80054da:	d040      	beq.n	800555e <_free_r+0x8a>
 80054dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e0:	1f0c      	subs	r4, r1, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfb8      	it	lt
 80054e6:	18e4      	addlt	r4, r4, r3
 80054e8:	f000 f8de 	bl	80056a8 <__malloc_lock>
 80054ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <_free_r+0x8c>)
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	b933      	cbnz	r3, 8005500 <_free_r+0x2c>
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	6014      	str	r4, [r2, #0]
 80054f6:	4628      	mov	r0, r5
 80054f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054fc:	f000 b8da 	b.w	80056b4 <__malloc_unlock>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d908      	bls.n	8005516 <_free_r+0x42>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	1821      	adds	r1, r4, r0
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1809      	addeq	r1, r1, r0
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	e7ed      	b.n	80054f2 <_free_r+0x1e>
 8005516:	461a      	mov	r2, r3
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b10b      	cbz	r3, 8005520 <_free_r+0x4c>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d9fa      	bls.n	8005516 <_free_r+0x42>
 8005520:	6811      	ldr	r1, [r2, #0]
 8005522:	1850      	adds	r0, r2, r1
 8005524:	42a0      	cmp	r0, r4
 8005526:	d10b      	bne.n	8005540 <_free_r+0x6c>
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	4401      	add	r1, r0
 800552c:	1850      	adds	r0, r2, r1
 800552e:	4283      	cmp	r3, r0
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	d1e0      	bne.n	80054f6 <_free_r+0x22>
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4408      	add	r0, r1
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	6053      	str	r3, [r2, #4]
 800553e:	e7da      	b.n	80054f6 <_free_r+0x22>
 8005540:	d902      	bls.n	8005548 <_free_r+0x74>
 8005542:	230c      	movs	r3, #12
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	e7d6      	b.n	80054f6 <_free_r+0x22>
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	1821      	adds	r1, r4, r0
 800554c:	428b      	cmp	r3, r1
 800554e:	bf01      	itttt	eq
 8005550:	6819      	ldreq	r1, [r3, #0]
 8005552:	685b      	ldreq	r3, [r3, #4]
 8005554:	1809      	addeq	r1, r1, r0
 8005556:	6021      	streq	r1, [r4, #0]
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6054      	str	r4, [r2, #4]
 800555c:	e7cb      	b.n	80054f6 <_free_r+0x22>
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000310 	.word	0x20000310

08005564 <sbrk_aligned>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4e0f      	ldr	r6, [pc, #60]	@ (80055a4 <sbrk_aligned+0x40>)
 8005568:	460c      	mov	r4, r1
 800556a:	6831      	ldr	r1, [r6, #0]
 800556c:	4605      	mov	r5, r0
 800556e:	b911      	cbnz	r1, 8005576 <sbrk_aligned+0x12>
 8005570:	f000 fcb2 	bl	8005ed8 <_sbrk_r>
 8005574:	6030      	str	r0, [r6, #0]
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f000 fcad 	bl	8005ed8 <_sbrk_r>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	d103      	bne.n	800558a <sbrk_aligned+0x26>
 8005582:	f04f 34ff 	mov.w	r4, #4294967295
 8005586:	4620      	mov	r0, r4
 8005588:	bd70      	pop	{r4, r5, r6, pc}
 800558a:	1cc4      	adds	r4, r0, #3
 800558c:	f024 0403 	bic.w	r4, r4, #3
 8005590:	42a0      	cmp	r0, r4
 8005592:	d0f8      	beq.n	8005586 <sbrk_aligned+0x22>
 8005594:	1a21      	subs	r1, r4, r0
 8005596:	4628      	mov	r0, r5
 8005598:	f000 fc9e 	bl	8005ed8 <_sbrk_r>
 800559c:	3001      	adds	r0, #1
 800559e:	d1f2      	bne.n	8005586 <sbrk_aligned+0x22>
 80055a0:	e7ef      	b.n	8005582 <sbrk_aligned+0x1e>
 80055a2:	bf00      	nop
 80055a4:	2000030c 	.word	0x2000030c

080055a8 <_malloc_r>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	1ccd      	adds	r5, r1, #3
 80055ae:	f025 0503 	bic.w	r5, r5, #3
 80055b2:	3508      	adds	r5, #8
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	bf38      	it	cc
 80055b8:	250c      	movcc	r5, #12
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	4606      	mov	r6, r0
 80055be:	db01      	blt.n	80055c4 <_malloc_r+0x1c>
 80055c0:	42a9      	cmp	r1, r5
 80055c2:	d904      	bls.n	80055ce <_malloc_r+0x26>
 80055c4:	230c      	movs	r3, #12
 80055c6:	6033      	str	r3, [r6, #0]
 80055c8:	2000      	movs	r0, #0
 80055ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056a4 <_malloc_r+0xfc>
 80055d2:	f000 f869 	bl	80056a8 <__malloc_lock>
 80055d6:	f8d8 3000 	ldr.w	r3, [r8]
 80055da:	461c      	mov	r4, r3
 80055dc:	bb44      	cbnz	r4, 8005630 <_malloc_r+0x88>
 80055de:	4629      	mov	r1, r5
 80055e0:	4630      	mov	r0, r6
 80055e2:	f7ff ffbf 	bl	8005564 <sbrk_aligned>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	4604      	mov	r4, r0
 80055ea:	d158      	bne.n	800569e <_malloc_r+0xf6>
 80055ec:	f8d8 4000 	ldr.w	r4, [r8]
 80055f0:	4627      	mov	r7, r4
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	d143      	bne.n	800567e <_malloc_r+0xd6>
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	d04b      	beq.n	8005692 <_malloc_r+0xea>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	4639      	mov	r1, r7
 80055fe:	4630      	mov	r0, r6
 8005600:	eb04 0903 	add.w	r9, r4, r3
 8005604:	f000 fc68 	bl	8005ed8 <_sbrk_r>
 8005608:	4581      	cmp	r9, r0
 800560a:	d142      	bne.n	8005692 <_malloc_r+0xea>
 800560c:	6821      	ldr	r1, [r4, #0]
 800560e:	4630      	mov	r0, r6
 8005610:	1a6d      	subs	r5, r5, r1
 8005612:	4629      	mov	r1, r5
 8005614:	f7ff ffa6 	bl	8005564 <sbrk_aligned>
 8005618:	3001      	adds	r0, #1
 800561a:	d03a      	beq.n	8005692 <_malloc_r+0xea>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	442b      	add	r3, r5
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	f8d8 3000 	ldr.w	r3, [r8]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	bb62      	cbnz	r2, 8005684 <_malloc_r+0xdc>
 800562a:	f8c8 7000 	str.w	r7, [r8]
 800562e:	e00f      	b.n	8005650 <_malloc_r+0xa8>
 8005630:	6822      	ldr	r2, [r4, #0]
 8005632:	1b52      	subs	r2, r2, r5
 8005634:	d420      	bmi.n	8005678 <_malloc_r+0xd0>
 8005636:	2a0b      	cmp	r2, #11
 8005638:	d917      	bls.n	800566a <_malloc_r+0xc2>
 800563a:	1961      	adds	r1, r4, r5
 800563c:	42a3      	cmp	r3, r4
 800563e:	6025      	str	r5, [r4, #0]
 8005640:	bf18      	it	ne
 8005642:	6059      	strne	r1, [r3, #4]
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	bf08      	it	eq
 8005648:	f8c8 1000 	streq.w	r1, [r8]
 800564c:	5162      	str	r2, [r4, r5]
 800564e:	604b      	str	r3, [r1, #4]
 8005650:	4630      	mov	r0, r6
 8005652:	f000 f82f 	bl	80056b4 <__malloc_unlock>
 8005656:	f104 000b 	add.w	r0, r4, #11
 800565a:	1d23      	adds	r3, r4, #4
 800565c:	f020 0007 	bic.w	r0, r0, #7
 8005660:	1ac2      	subs	r2, r0, r3
 8005662:	bf1c      	itt	ne
 8005664:	1a1b      	subne	r3, r3, r0
 8005666:	50a3      	strne	r3, [r4, r2]
 8005668:	e7af      	b.n	80055ca <_malloc_r+0x22>
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	42a3      	cmp	r3, r4
 800566e:	bf0c      	ite	eq
 8005670:	f8c8 2000 	streq.w	r2, [r8]
 8005674:	605a      	strne	r2, [r3, #4]
 8005676:	e7eb      	b.n	8005650 <_malloc_r+0xa8>
 8005678:	4623      	mov	r3, r4
 800567a:	6864      	ldr	r4, [r4, #4]
 800567c:	e7ae      	b.n	80055dc <_malloc_r+0x34>
 800567e:	463c      	mov	r4, r7
 8005680:	687f      	ldr	r7, [r7, #4]
 8005682:	e7b6      	b.n	80055f2 <_malloc_r+0x4a>
 8005684:	461a      	mov	r2, r3
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	42a3      	cmp	r3, r4
 800568a:	d1fb      	bne.n	8005684 <_malloc_r+0xdc>
 800568c:	2300      	movs	r3, #0
 800568e:	6053      	str	r3, [r2, #4]
 8005690:	e7de      	b.n	8005650 <_malloc_r+0xa8>
 8005692:	230c      	movs	r3, #12
 8005694:	4630      	mov	r0, r6
 8005696:	6033      	str	r3, [r6, #0]
 8005698:	f000 f80c 	bl	80056b4 <__malloc_unlock>
 800569c:	e794      	b.n	80055c8 <_malloc_r+0x20>
 800569e:	6005      	str	r5, [r0, #0]
 80056a0:	e7d6      	b.n	8005650 <_malloc_r+0xa8>
 80056a2:	bf00      	nop
 80056a4:	20000310 	.word	0x20000310

080056a8 <__malloc_lock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	@ (80056b0 <__malloc_lock+0x8>)
 80056aa:	f7ff bf10 	b.w	80054ce <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20000308 	.word	0x20000308

080056b4 <__malloc_unlock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	@ (80056bc <__malloc_unlock+0x8>)
 80056b6:	f7ff bf0b 	b.w	80054d0 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20000308 	.word	0x20000308

080056c0 <__sfputc_r>:
 80056c0:	6893      	ldr	r3, [r2, #8]
 80056c2:	b410      	push	{r4}
 80056c4:	3b01      	subs	r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	6093      	str	r3, [r2, #8]
 80056ca:	da07      	bge.n	80056dc <__sfputc_r+0x1c>
 80056cc:	6994      	ldr	r4, [r2, #24]
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	db01      	blt.n	80056d6 <__sfputc_r+0x16>
 80056d2:	290a      	cmp	r1, #10
 80056d4:	d102      	bne.n	80056dc <__sfputc_r+0x1c>
 80056d6:	bc10      	pop	{r4}
 80056d8:	f000 bb6a 	b.w	8005db0 <__swbuf_r>
 80056dc:	6813      	ldr	r3, [r2, #0]
 80056de:	1c58      	adds	r0, r3, #1
 80056e0:	6010      	str	r0, [r2, #0]
 80056e2:	7019      	strb	r1, [r3, #0]
 80056e4:	4608      	mov	r0, r1
 80056e6:	bc10      	pop	{r4}
 80056e8:	4770      	bx	lr

080056ea <__sfputs_r>:
 80056ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ec:	4606      	mov	r6, r0
 80056ee:	460f      	mov	r7, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	18d5      	adds	r5, r2, r3
 80056f4:	42ac      	cmp	r4, r5
 80056f6:	d101      	bne.n	80056fc <__sfputs_r+0x12>
 80056f8:	2000      	movs	r0, #0
 80056fa:	e007      	b.n	800570c <__sfputs_r+0x22>
 80056fc:	463a      	mov	r2, r7
 80056fe:	4630      	mov	r0, r6
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	f7ff ffdc 	bl	80056c0 <__sfputc_r>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d1f3      	bne.n	80056f4 <__sfputs_r+0xa>
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005710 <_vfiprintf_r>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	460d      	mov	r5, r1
 8005716:	4614      	mov	r4, r2
 8005718:	4698      	mov	r8, r3
 800571a:	4606      	mov	r6, r0
 800571c:	b09d      	sub	sp, #116	@ 0x74
 800571e:	b118      	cbz	r0, 8005728 <_vfiprintf_r+0x18>
 8005720:	6a03      	ldr	r3, [r0, #32]
 8005722:	b90b      	cbnz	r3, 8005728 <_vfiprintf_r+0x18>
 8005724:	f7ff fdce 	bl	80052c4 <__sinit>
 8005728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800572a:	07d9      	lsls	r1, r3, #31
 800572c:	d405      	bmi.n	800573a <_vfiprintf_r+0x2a>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	059a      	lsls	r2, r3, #22
 8005732:	d402      	bmi.n	800573a <_vfiprintf_r+0x2a>
 8005734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005736:	f7ff feca 	bl	80054ce <__retarget_lock_acquire_recursive>
 800573a:	89ab      	ldrh	r3, [r5, #12]
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	d501      	bpl.n	8005744 <_vfiprintf_r+0x34>
 8005740:	692b      	ldr	r3, [r5, #16]
 8005742:	b99b      	cbnz	r3, 800576c <_vfiprintf_r+0x5c>
 8005744:	4629      	mov	r1, r5
 8005746:	4630      	mov	r0, r6
 8005748:	f000 fb70 	bl	8005e2c <__swsetup_r>
 800574c:	b170      	cbz	r0, 800576c <_vfiprintf_r+0x5c>
 800574e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005750:	07dc      	lsls	r4, r3, #31
 8005752:	d504      	bpl.n	800575e <_vfiprintf_r+0x4e>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	b01d      	add	sp, #116	@ 0x74
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	89ab      	ldrh	r3, [r5, #12]
 8005760:	0598      	lsls	r0, r3, #22
 8005762:	d4f7      	bmi.n	8005754 <_vfiprintf_r+0x44>
 8005764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005766:	f7ff feb3 	bl	80054d0 <__retarget_lock_release_recursive>
 800576a:	e7f3      	b.n	8005754 <_vfiprintf_r+0x44>
 800576c:	2300      	movs	r3, #0
 800576e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005770:	2320      	movs	r3, #32
 8005772:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005776:	2330      	movs	r3, #48	@ 0x30
 8005778:	f04f 0901 	mov.w	r9, #1
 800577c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005780:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800592c <_vfiprintf_r+0x21c>
 8005784:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005788:	4623      	mov	r3, r4
 800578a:	469a      	mov	sl, r3
 800578c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005790:	b10a      	cbz	r2, 8005796 <_vfiprintf_r+0x86>
 8005792:	2a25      	cmp	r2, #37	@ 0x25
 8005794:	d1f9      	bne.n	800578a <_vfiprintf_r+0x7a>
 8005796:	ebba 0b04 	subs.w	fp, sl, r4
 800579a:	d00b      	beq.n	80057b4 <_vfiprintf_r+0xa4>
 800579c:	465b      	mov	r3, fp
 800579e:	4622      	mov	r2, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	4630      	mov	r0, r6
 80057a4:	f7ff ffa1 	bl	80056ea <__sfputs_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	f000 80a7 	beq.w	80058fc <_vfiprintf_r+0x1ec>
 80057ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057b0:	445a      	add	r2, fp
 80057b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80057b4:	f89a 3000 	ldrb.w	r3, [sl]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 809f 	beq.w	80058fc <_vfiprintf_r+0x1ec>
 80057be:	2300      	movs	r3, #0
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057c8:	f10a 0a01 	add.w	sl, sl, #1
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80057d6:	4654      	mov	r4, sl
 80057d8:	2205      	movs	r2, #5
 80057da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057de:	4853      	ldr	r0, [pc, #332]	@ (800592c <_vfiprintf_r+0x21c>)
 80057e0:	f000 fb8a 	bl	8005ef8 <memchr>
 80057e4:	9a04      	ldr	r2, [sp, #16]
 80057e6:	b9d8      	cbnz	r0, 8005820 <_vfiprintf_r+0x110>
 80057e8:	06d1      	lsls	r1, r2, #27
 80057ea:	bf44      	itt	mi
 80057ec:	2320      	movmi	r3, #32
 80057ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057f2:	0713      	lsls	r3, r2, #28
 80057f4:	bf44      	itt	mi
 80057f6:	232b      	movmi	r3, #43	@ 0x2b
 80057f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005800:	2b2a      	cmp	r3, #42	@ 0x2a
 8005802:	d015      	beq.n	8005830 <_vfiprintf_r+0x120>
 8005804:	4654      	mov	r4, sl
 8005806:	2000      	movs	r0, #0
 8005808:	f04f 0c0a 	mov.w	ip, #10
 800580c:	9a07      	ldr	r2, [sp, #28]
 800580e:	4621      	mov	r1, r4
 8005810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005814:	3b30      	subs	r3, #48	@ 0x30
 8005816:	2b09      	cmp	r3, #9
 8005818:	d94b      	bls.n	80058b2 <_vfiprintf_r+0x1a2>
 800581a:	b1b0      	cbz	r0, 800584a <_vfiprintf_r+0x13a>
 800581c:	9207      	str	r2, [sp, #28]
 800581e:	e014      	b.n	800584a <_vfiprintf_r+0x13a>
 8005820:	eba0 0308 	sub.w	r3, r0, r8
 8005824:	fa09 f303 	lsl.w	r3, r9, r3
 8005828:	4313      	orrs	r3, r2
 800582a:	46a2      	mov	sl, r4
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	e7d2      	b.n	80057d6 <_vfiprintf_r+0xc6>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1d19      	adds	r1, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9103      	str	r1, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfbb      	ittet	lt
 800583c:	425b      	neglt	r3, r3
 800583e:	f042 0202 	orrlt.w	r2, r2, #2
 8005842:	9307      	strge	r3, [sp, #28]
 8005844:	9307      	strlt	r3, [sp, #28]
 8005846:	bfb8      	it	lt
 8005848:	9204      	strlt	r2, [sp, #16]
 800584a:	7823      	ldrb	r3, [r4, #0]
 800584c:	2b2e      	cmp	r3, #46	@ 0x2e
 800584e:	d10a      	bne.n	8005866 <_vfiprintf_r+0x156>
 8005850:	7863      	ldrb	r3, [r4, #1]
 8005852:	2b2a      	cmp	r3, #42	@ 0x2a
 8005854:	d132      	bne.n	80058bc <_vfiprintf_r+0x1ac>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	3402      	adds	r4, #2
 800585a:	1d1a      	adds	r2, r3, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	9203      	str	r2, [sp, #12]
 8005860:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005930 <_vfiprintf_r+0x220>
 800586a:	2203      	movs	r2, #3
 800586c:	4650      	mov	r0, sl
 800586e:	7821      	ldrb	r1, [r4, #0]
 8005870:	f000 fb42 	bl	8005ef8 <memchr>
 8005874:	b138      	cbz	r0, 8005886 <_vfiprintf_r+0x176>
 8005876:	2240      	movs	r2, #64	@ 0x40
 8005878:	9b04      	ldr	r3, [sp, #16]
 800587a:	eba0 000a 	sub.w	r0, r0, sl
 800587e:	4082      	lsls	r2, r0
 8005880:	4313      	orrs	r3, r2
 8005882:	3401      	adds	r4, #1
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800588a:	2206      	movs	r2, #6
 800588c:	4829      	ldr	r0, [pc, #164]	@ (8005934 <_vfiprintf_r+0x224>)
 800588e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005892:	f000 fb31 	bl	8005ef8 <memchr>
 8005896:	2800      	cmp	r0, #0
 8005898:	d03f      	beq.n	800591a <_vfiprintf_r+0x20a>
 800589a:	4b27      	ldr	r3, [pc, #156]	@ (8005938 <_vfiprintf_r+0x228>)
 800589c:	bb1b      	cbnz	r3, 80058e6 <_vfiprintf_r+0x1d6>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	3307      	adds	r3, #7
 80058a2:	f023 0307 	bic.w	r3, r3, #7
 80058a6:	3308      	adds	r3, #8
 80058a8:	9303      	str	r3, [sp, #12]
 80058aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ac:	443b      	add	r3, r7
 80058ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b0:	e76a      	b.n	8005788 <_vfiprintf_r+0x78>
 80058b2:	460c      	mov	r4, r1
 80058b4:	2001      	movs	r0, #1
 80058b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ba:	e7a8      	b.n	800580e <_vfiprintf_r+0xfe>
 80058bc:	2300      	movs	r3, #0
 80058be:	f04f 0c0a 	mov.w	ip, #10
 80058c2:	4619      	mov	r1, r3
 80058c4:	3401      	adds	r4, #1
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	4620      	mov	r0, r4
 80058ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ce:	3a30      	subs	r2, #48	@ 0x30
 80058d0:	2a09      	cmp	r2, #9
 80058d2:	d903      	bls.n	80058dc <_vfiprintf_r+0x1cc>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0c6      	beq.n	8005866 <_vfiprintf_r+0x156>
 80058d8:	9105      	str	r1, [sp, #20]
 80058da:	e7c4      	b.n	8005866 <_vfiprintf_r+0x156>
 80058dc:	4604      	mov	r4, r0
 80058de:	2301      	movs	r3, #1
 80058e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80058e4:	e7f0      	b.n	80058c8 <_vfiprintf_r+0x1b8>
 80058e6:	ab03      	add	r3, sp, #12
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	462a      	mov	r2, r5
 80058ec:	4630      	mov	r0, r6
 80058ee:	4b13      	ldr	r3, [pc, #76]	@ (800593c <_vfiprintf_r+0x22c>)
 80058f0:	a904      	add	r1, sp, #16
 80058f2:	f3af 8000 	nop.w
 80058f6:	4607      	mov	r7, r0
 80058f8:	1c78      	adds	r0, r7, #1
 80058fa:	d1d6      	bne.n	80058aa <_vfiprintf_r+0x19a>
 80058fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058fe:	07d9      	lsls	r1, r3, #31
 8005900:	d405      	bmi.n	800590e <_vfiprintf_r+0x1fe>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	059a      	lsls	r2, r3, #22
 8005906:	d402      	bmi.n	800590e <_vfiprintf_r+0x1fe>
 8005908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800590a:	f7ff fde1 	bl	80054d0 <__retarget_lock_release_recursive>
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	065b      	lsls	r3, r3, #25
 8005912:	f53f af1f 	bmi.w	8005754 <_vfiprintf_r+0x44>
 8005916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005918:	e71e      	b.n	8005758 <_vfiprintf_r+0x48>
 800591a:	ab03      	add	r3, sp, #12
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	462a      	mov	r2, r5
 8005920:	4630      	mov	r0, r6
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <_vfiprintf_r+0x22c>)
 8005924:	a904      	add	r1, sp, #16
 8005926:	f000 f87d 	bl	8005a24 <_printf_i>
 800592a:	e7e4      	b.n	80058f6 <_vfiprintf_r+0x1e6>
 800592c:	0800642a 	.word	0x0800642a
 8005930:	08006430 	.word	0x08006430
 8005934:	08006434 	.word	0x08006434
 8005938:	00000000 	.word	0x00000000
 800593c:	080056eb 	.word	0x080056eb

08005940 <_printf_common>:
 8005940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	4616      	mov	r6, r2
 8005946:	4698      	mov	r8, r3
 8005948:	688a      	ldr	r2, [r1, #8]
 800594a:	690b      	ldr	r3, [r1, #16]
 800594c:	4607      	mov	r7, r0
 800594e:	4293      	cmp	r3, r2
 8005950:	bfb8      	it	lt
 8005952:	4613      	movlt	r3, r2
 8005954:	6033      	str	r3, [r6, #0]
 8005956:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800595a:	460c      	mov	r4, r1
 800595c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005960:	b10a      	cbz	r2, 8005966 <_printf_common+0x26>
 8005962:	3301      	adds	r3, #1
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	0699      	lsls	r1, r3, #26
 800596a:	bf42      	ittt	mi
 800596c:	6833      	ldrmi	r3, [r6, #0]
 800596e:	3302      	addmi	r3, #2
 8005970:	6033      	strmi	r3, [r6, #0]
 8005972:	6825      	ldr	r5, [r4, #0]
 8005974:	f015 0506 	ands.w	r5, r5, #6
 8005978:	d106      	bne.n	8005988 <_printf_common+0x48>
 800597a:	f104 0a19 	add.w	sl, r4, #25
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	6832      	ldr	r2, [r6, #0]
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	42ab      	cmp	r3, r5
 8005986:	dc2b      	bgt.n	80059e0 <_printf_common+0xa0>
 8005988:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800598c:	6822      	ldr	r2, [r4, #0]
 800598e:	3b00      	subs	r3, #0
 8005990:	bf18      	it	ne
 8005992:	2301      	movne	r3, #1
 8005994:	0692      	lsls	r2, r2, #26
 8005996:	d430      	bmi.n	80059fa <_printf_common+0xba>
 8005998:	4641      	mov	r1, r8
 800599a:	4638      	mov	r0, r7
 800599c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059a0:	47c8      	blx	r9
 80059a2:	3001      	adds	r0, #1
 80059a4:	d023      	beq.n	80059ee <_printf_common+0xae>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	6922      	ldr	r2, [r4, #16]
 80059aa:	f003 0306 	and.w	r3, r3, #6
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	bf14      	ite	ne
 80059b2:	2500      	movne	r5, #0
 80059b4:	6833      	ldreq	r3, [r6, #0]
 80059b6:	f04f 0600 	mov.w	r6, #0
 80059ba:	bf08      	it	eq
 80059bc:	68e5      	ldreq	r5, [r4, #12]
 80059be:	f104 041a 	add.w	r4, r4, #26
 80059c2:	bf08      	it	eq
 80059c4:	1aed      	subeq	r5, r5, r3
 80059c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80059ca:	bf08      	it	eq
 80059cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d0:	4293      	cmp	r3, r2
 80059d2:	bfc4      	itt	gt
 80059d4:	1a9b      	subgt	r3, r3, r2
 80059d6:	18ed      	addgt	r5, r5, r3
 80059d8:	42b5      	cmp	r5, r6
 80059da:	d11a      	bne.n	8005a12 <_printf_common+0xd2>
 80059dc:	2000      	movs	r0, #0
 80059de:	e008      	b.n	80059f2 <_printf_common+0xb2>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4652      	mov	r2, sl
 80059e4:	4641      	mov	r1, r8
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c8      	blx	r9
 80059ea:	3001      	adds	r0, #1
 80059ec:	d103      	bne.n	80059f6 <_printf_common+0xb6>
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	3501      	adds	r5, #1
 80059f8:	e7c1      	b.n	800597e <_printf_common+0x3e>
 80059fa:	2030      	movs	r0, #48	@ 0x30
 80059fc:	18e1      	adds	r1, r4, r3
 80059fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a08:	4422      	add	r2, r4
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a10:	e7c2      	b.n	8005998 <_printf_common+0x58>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4622      	mov	r2, r4
 8005a16:	4641      	mov	r1, r8
 8005a18:	4638      	mov	r0, r7
 8005a1a:	47c8      	blx	r9
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d0e6      	beq.n	80059ee <_printf_common+0xae>
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7d9      	b.n	80059d8 <_printf_common+0x98>

08005a24 <_printf_i>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	7e0f      	ldrb	r7, [r1, #24]
 8005a2a:	4691      	mov	r9, r2
 8005a2c:	2f78      	cmp	r7, #120	@ 0x78
 8005a2e:	4680      	mov	r8, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	469a      	mov	sl, r3
 8005a34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a3a:	d807      	bhi.n	8005a4c <_printf_i+0x28>
 8005a3c:	2f62      	cmp	r7, #98	@ 0x62
 8005a3e:	d80a      	bhi.n	8005a56 <_printf_i+0x32>
 8005a40:	2f00      	cmp	r7, #0
 8005a42:	f000 80d1 	beq.w	8005be8 <_printf_i+0x1c4>
 8005a46:	2f58      	cmp	r7, #88	@ 0x58
 8005a48:	f000 80b8 	beq.w	8005bbc <_printf_i+0x198>
 8005a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a54:	e03a      	b.n	8005acc <_printf_i+0xa8>
 8005a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a5a:	2b15      	cmp	r3, #21
 8005a5c:	d8f6      	bhi.n	8005a4c <_printf_i+0x28>
 8005a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a64 <_printf_i+0x40>)
 8005a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005a4d 	.word	0x08005a4d
 8005a70:	08005a4d 	.word	0x08005a4d
 8005a74:	08005a4d 	.word	0x08005a4d
 8005a78:	08005a4d 	.word	0x08005a4d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a4d 	.word	0x08005a4d
 8005a84:	08005a4d 	.word	0x08005a4d
 8005a88:	08005a4d 	.word	0x08005a4d
 8005a8c:	08005a4d 	.word	0x08005a4d
 8005a90:	08005bcf 	.word	0x08005bcf
 8005a94:	08005afb 	.word	0x08005afb
 8005a98:	08005b89 	.word	0x08005b89
 8005a9c:	08005a4d 	.word	0x08005a4d
 8005aa0:	08005a4d 	.word	0x08005a4d
 8005aa4:	08005bf1 	.word	0x08005bf1
 8005aa8:	08005a4d 	.word	0x08005a4d
 8005aac:	08005afb 	.word	0x08005afb
 8005ab0:	08005a4d 	.word	0x08005a4d
 8005ab4:	08005a4d 	.word	0x08005a4d
 8005ab8:	08005b91 	.word	0x08005b91
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6032      	str	r2, [r6, #0]
 8005ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005acc:	2301      	movs	r3, #1
 8005ace:	e09c      	b.n	8005c0a <_printf_i+0x1e6>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	6031      	str	r1, [r6, #0]
 8005ad8:	0606      	lsls	r6, r0, #24
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0xbc>
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	e003      	b.n	8005ae8 <_printf_i+0xc4>
 8005ae0:	0645      	lsls	r5, r0, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0xb8>
 8005ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	da03      	bge.n	8005af4 <_printf_i+0xd0>
 8005aec:	232d      	movs	r3, #45	@ 0x2d
 8005aee:	426d      	negs	r5, r5
 8005af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af4:	230a      	movs	r3, #10
 8005af6:	4858      	ldr	r0, [pc, #352]	@ (8005c58 <_printf_i+0x234>)
 8005af8:	e011      	b.n	8005b1e <_printf_i+0xfa>
 8005afa:	6821      	ldr	r1, [r4, #0]
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	0608      	lsls	r0, r1, #24
 8005b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b04:	d402      	bmi.n	8005b0c <_printf_i+0xe8>
 8005b06:	0649      	lsls	r1, r1, #25
 8005b08:	bf48      	it	mi
 8005b0a:	b2ad      	uxthmi	r5, r5
 8005b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b0e:	6033      	str	r3, [r6, #0]
 8005b10:	bf14      	ite	ne
 8005b12:	230a      	movne	r3, #10
 8005b14:	2308      	moveq	r3, #8
 8005b16:	4850      	ldr	r0, [pc, #320]	@ (8005c58 <_printf_i+0x234>)
 8005b18:	2100      	movs	r1, #0
 8005b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b1e:	6866      	ldr	r6, [r4, #4]
 8005b20:	2e00      	cmp	r6, #0
 8005b22:	60a6      	str	r6, [r4, #8]
 8005b24:	db05      	blt.n	8005b32 <_printf_i+0x10e>
 8005b26:	6821      	ldr	r1, [r4, #0]
 8005b28:	432e      	orrs	r6, r5
 8005b2a:	f021 0104 	bic.w	r1, r1, #4
 8005b2e:	6021      	str	r1, [r4, #0]
 8005b30:	d04b      	beq.n	8005bca <_printf_i+0x1a6>
 8005b32:	4616      	mov	r6, r2
 8005b34:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b38:	fb03 5711 	mls	r7, r3, r1, r5
 8005b3c:	5dc7      	ldrb	r7, [r0, r7]
 8005b3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b42:	462f      	mov	r7, r5
 8005b44:	42bb      	cmp	r3, r7
 8005b46:	460d      	mov	r5, r1
 8005b48:	d9f4      	bls.n	8005b34 <_printf_i+0x110>
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d10b      	bne.n	8005b66 <_printf_i+0x142>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	07df      	lsls	r7, r3, #31
 8005b52:	d508      	bpl.n	8005b66 <_printf_i+0x142>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	6861      	ldr	r1, [r4, #4]
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	bfde      	ittt	le
 8005b5c:	2330      	movle	r3, #48	@ 0x30
 8005b5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b66:	1b92      	subs	r2, r2, r6
 8005b68:	6122      	str	r2, [r4, #16]
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f8cd a000 	str.w	sl, [sp]
 8005b74:	aa03      	add	r2, sp, #12
 8005b76:	f7ff fee3 	bl	8005940 <_printf_common>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d14a      	bne.n	8005c14 <_printf_i+0x1f0>
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	b004      	add	sp, #16
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	f043 0320 	orr.w	r3, r3, #32
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	2778      	movs	r7, #120	@ 0x78
 8005b92:	4832      	ldr	r0, [pc, #200]	@ (8005c5c <_printf_i+0x238>)
 8005b94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	6831      	ldr	r1, [r6, #0]
 8005b9c:	061f      	lsls	r7, r3, #24
 8005b9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ba2:	d402      	bmi.n	8005baa <_printf_i+0x186>
 8005ba4:	065f      	lsls	r7, r3, #25
 8005ba6:	bf48      	it	mi
 8005ba8:	b2ad      	uxthmi	r5, r5
 8005baa:	6031      	str	r1, [r6, #0]
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	bf44      	itt	mi
 8005bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb4:	6023      	strmi	r3, [r4, #0]
 8005bb6:	b11d      	cbz	r5, 8005bc0 <_printf_i+0x19c>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	e7ad      	b.n	8005b18 <_printf_i+0xf4>
 8005bbc:	4826      	ldr	r0, [pc, #152]	@ (8005c58 <_printf_i+0x234>)
 8005bbe:	e7e9      	b.n	8005b94 <_printf_i+0x170>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	f023 0320 	bic.w	r3, r3, #32
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	e7f6      	b.n	8005bb8 <_printf_i+0x194>
 8005bca:	4616      	mov	r6, r2
 8005bcc:	e7bd      	b.n	8005b4a <_printf_i+0x126>
 8005bce:	6833      	ldr	r3, [r6, #0]
 8005bd0:	6825      	ldr	r5, [r4, #0]
 8005bd2:	1d18      	adds	r0, r3, #4
 8005bd4:	6961      	ldr	r1, [r4, #20]
 8005bd6:	6030      	str	r0, [r6, #0]
 8005bd8:	062e      	lsls	r6, r5, #24
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	d501      	bpl.n	8005be2 <_printf_i+0x1be>
 8005bde:	6019      	str	r1, [r3, #0]
 8005be0:	e002      	b.n	8005be8 <_printf_i+0x1c4>
 8005be2:	0668      	lsls	r0, r5, #25
 8005be4:	d5fb      	bpl.n	8005bde <_printf_i+0x1ba>
 8005be6:	8019      	strh	r1, [r3, #0]
 8005be8:	2300      	movs	r3, #0
 8005bea:	4616      	mov	r6, r2
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	e7bc      	b.n	8005b6a <_printf_i+0x146>
 8005bf0:	6833      	ldr	r3, [r6, #0]
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	6032      	str	r2, [r6, #0]
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f000 f97b 	bl	8005ef8 <memchr>
 8005c02:	b108      	cbz	r0, 8005c08 <_printf_i+0x1e4>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	6060      	str	r0, [r4, #4]
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c12:	e7aa      	b.n	8005b6a <_printf_i+0x146>
 8005c14:	4632      	mov	r2, r6
 8005c16:	4649      	mov	r1, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	47d0      	blx	sl
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d0ad      	beq.n	8005b7e <_printf_i+0x15a>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	079b      	lsls	r3, r3, #30
 8005c26:	d413      	bmi.n	8005c50 <_printf_i+0x22c>
 8005c28:	68e0      	ldr	r0, [r4, #12]
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	4298      	cmp	r0, r3
 8005c2e:	bfb8      	it	lt
 8005c30:	4618      	movlt	r0, r3
 8005c32:	e7a6      	b.n	8005b82 <_printf_i+0x15e>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4632      	mov	r2, r6
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	47d0      	blx	sl
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d09d      	beq.n	8005b7e <_printf_i+0x15a>
 8005c42:	3501      	adds	r5, #1
 8005c44:	68e3      	ldr	r3, [r4, #12]
 8005c46:	9903      	ldr	r1, [sp, #12]
 8005c48:	1a5b      	subs	r3, r3, r1
 8005c4a:	42ab      	cmp	r3, r5
 8005c4c:	dcf2      	bgt.n	8005c34 <_printf_i+0x210>
 8005c4e:	e7eb      	b.n	8005c28 <_printf_i+0x204>
 8005c50:	2500      	movs	r5, #0
 8005c52:	f104 0619 	add.w	r6, r4, #25
 8005c56:	e7f5      	b.n	8005c44 <_printf_i+0x220>
 8005c58:	0800643b 	.word	0x0800643b
 8005c5c:	0800644c 	.word	0x0800644c

08005c60 <__sflush_r>:
 8005c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	0716      	lsls	r6, r2, #28
 8005c68:	4605      	mov	r5, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	d454      	bmi.n	8005d18 <__sflush_r+0xb8>
 8005c6e:	684b      	ldr	r3, [r1, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dc02      	bgt.n	8005c7a <__sflush_r+0x1a>
 8005c74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dd48      	ble.n	8005d0c <__sflush_r+0xac>
 8005c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c7c:	2e00      	cmp	r6, #0
 8005c7e:	d045      	beq.n	8005d0c <__sflush_r+0xac>
 8005c80:	2300      	movs	r3, #0
 8005c82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c86:	682f      	ldr	r7, [r5, #0]
 8005c88:	6a21      	ldr	r1, [r4, #32]
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	d030      	beq.n	8005cf0 <__sflush_r+0x90>
 8005c8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	0759      	lsls	r1, r3, #29
 8005c94:	d505      	bpl.n	8005ca2 <__sflush_r+0x42>
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c9c:	b10b      	cbz	r3, 8005ca2 <__sflush_r+0x42>
 8005c9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ca8:	6a21      	ldr	r1, [r4, #32]
 8005caa:	47b0      	blx	r6
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	d106      	bne.n	8005cc0 <__sflush_r+0x60>
 8005cb2:	6829      	ldr	r1, [r5, #0]
 8005cb4:	291d      	cmp	r1, #29
 8005cb6:	d82b      	bhi.n	8005d10 <__sflush_r+0xb0>
 8005cb8:	4a28      	ldr	r2, [pc, #160]	@ (8005d5c <__sflush_r+0xfc>)
 8005cba:	40ca      	lsrs	r2, r1
 8005cbc:	07d6      	lsls	r6, r2, #31
 8005cbe:	d527      	bpl.n	8005d10 <__sflush_r+0xb0>
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	6062      	str	r2, [r4, #4]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	04d9      	lsls	r1, r3, #19
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	d504      	bpl.n	8005cd6 <__sflush_r+0x76>
 8005ccc:	1c42      	adds	r2, r0, #1
 8005cce:	d101      	bne.n	8005cd4 <__sflush_r+0x74>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b903      	cbnz	r3, 8005cd6 <__sflush_r+0x76>
 8005cd4:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cd8:	602f      	str	r7, [r5, #0]
 8005cda:	b1b9      	cbz	r1, 8005d0c <__sflush_r+0xac>
 8005cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	d002      	beq.n	8005cea <__sflush_r+0x8a>
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f7ff fbf5 	bl	80054d4 <_free_r>
 8005cea:	2300      	movs	r3, #0
 8005cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cee:	e00d      	b.n	8005d0c <__sflush_r+0xac>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b0      	blx	r6
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	1c50      	adds	r0, r2, #1
 8005cfa:	d1c9      	bne.n	8005c90 <__sflush_r+0x30>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0c6      	beq.n	8005c90 <__sflush_r+0x30>
 8005d02:	2b1d      	cmp	r3, #29
 8005d04:	d001      	beq.n	8005d0a <__sflush_r+0xaa>
 8005d06:	2b16      	cmp	r3, #22
 8005d08:	d11d      	bne.n	8005d46 <__sflush_r+0xe6>
 8005d0a:	602f      	str	r7, [r5, #0]
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e021      	b.n	8005d54 <__sflush_r+0xf4>
 8005d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d14:	b21b      	sxth	r3, r3
 8005d16:	e01a      	b.n	8005d4e <__sflush_r+0xee>
 8005d18:	690f      	ldr	r7, [r1, #16]
 8005d1a:	2f00      	cmp	r7, #0
 8005d1c:	d0f6      	beq.n	8005d0c <__sflush_r+0xac>
 8005d1e:	0793      	lsls	r3, r2, #30
 8005d20:	bf18      	it	ne
 8005d22:	2300      	movne	r3, #0
 8005d24:	680e      	ldr	r6, [r1, #0]
 8005d26:	bf08      	it	eq
 8005d28:	694b      	ldreq	r3, [r1, #20]
 8005d2a:	1bf6      	subs	r6, r6, r7
 8005d2c:	600f      	str	r7, [r1, #0]
 8005d2e:	608b      	str	r3, [r1, #8]
 8005d30:	2e00      	cmp	r6, #0
 8005d32:	ddeb      	ble.n	8005d0c <__sflush_r+0xac>
 8005d34:	4633      	mov	r3, r6
 8005d36:	463a      	mov	r2, r7
 8005d38:	4628      	mov	r0, r5
 8005d3a:	6a21      	ldr	r1, [r4, #32]
 8005d3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005d40:	47e0      	blx	ip
 8005d42:	2800      	cmp	r0, #0
 8005d44:	dc07      	bgt.n	8005d56 <__sflush_r+0xf6>
 8005d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d56:	4407      	add	r7, r0
 8005d58:	1a36      	subs	r6, r6, r0
 8005d5a:	e7e9      	b.n	8005d30 <__sflush_r+0xd0>
 8005d5c:	20400001 	.word	0x20400001

08005d60 <_fflush_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	4605      	mov	r5, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b913      	cbnz	r3, 8005d70 <_fflush_r+0x10>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	b118      	cbz	r0, 8005d7a <_fflush_r+0x1a>
 8005d72:	6a03      	ldr	r3, [r0, #32]
 8005d74:	b90b      	cbnz	r3, 8005d7a <_fflush_r+0x1a>
 8005d76:	f7ff faa5 	bl	80052c4 <__sinit>
 8005d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f3      	beq.n	8005d6a <_fflush_r+0xa>
 8005d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d84:	07d0      	lsls	r0, r2, #31
 8005d86:	d404      	bmi.n	8005d92 <_fflush_r+0x32>
 8005d88:	0599      	lsls	r1, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_fflush_r+0x32>
 8005d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d8e:	f7ff fb9e 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005d92:	4628      	mov	r0, r5
 8005d94:	4621      	mov	r1, r4
 8005d96:	f7ff ff63 	bl	8005c60 <__sflush_r>
 8005d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	07da      	lsls	r2, r3, #31
 8005da0:	d4e4      	bmi.n	8005d6c <_fflush_r+0xc>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	059b      	lsls	r3, r3, #22
 8005da6:	d4e1      	bmi.n	8005d6c <_fflush_r+0xc>
 8005da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005daa:	f7ff fb91 	bl	80054d0 <__retarget_lock_release_recursive>
 8005dae:	e7dd      	b.n	8005d6c <_fflush_r+0xc>

08005db0 <__swbuf_r>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	460e      	mov	r6, r1
 8005db4:	4614      	mov	r4, r2
 8005db6:	4605      	mov	r5, r0
 8005db8:	b118      	cbz	r0, 8005dc2 <__swbuf_r+0x12>
 8005dba:	6a03      	ldr	r3, [r0, #32]
 8005dbc:	b90b      	cbnz	r3, 8005dc2 <__swbuf_r+0x12>
 8005dbe:	f7ff fa81 	bl	80052c4 <__sinit>
 8005dc2:	69a3      	ldr	r3, [r4, #24]
 8005dc4:	60a3      	str	r3, [r4, #8]
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	071a      	lsls	r2, r3, #28
 8005dca:	d501      	bpl.n	8005dd0 <__swbuf_r+0x20>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	b943      	cbnz	r3, 8005de2 <__swbuf_r+0x32>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 f82a 	bl	8005e2c <__swsetup_r>
 8005dd8:	b118      	cbz	r0, 8005de2 <__swbuf_r+0x32>
 8005dda:	f04f 37ff 	mov.w	r7, #4294967295
 8005dde:	4638      	mov	r0, r7
 8005de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	6922      	ldr	r2, [r4, #16]
 8005de6:	b2f6      	uxtb	r6, r6
 8005de8:	1a98      	subs	r0, r3, r2
 8005dea:	6963      	ldr	r3, [r4, #20]
 8005dec:	4637      	mov	r7, r6
 8005dee:	4283      	cmp	r3, r0
 8005df0:	dc05      	bgt.n	8005dfe <__swbuf_r+0x4e>
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f7ff ffb3 	bl	8005d60 <_fflush_r>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d1ed      	bne.n	8005dda <__swbuf_r+0x2a>
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	701e      	strb	r6, [r3, #0]
 8005e0c:	6962      	ldr	r2, [r4, #20]
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d004      	beq.n	8005e1e <__swbuf_r+0x6e>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	07db      	lsls	r3, r3, #31
 8005e18:	d5e1      	bpl.n	8005dde <__swbuf_r+0x2e>
 8005e1a:	2e0a      	cmp	r6, #10
 8005e1c:	d1df      	bne.n	8005dde <__swbuf_r+0x2e>
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7ff ff9d 	bl	8005d60 <_fflush_r>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0d9      	beq.n	8005dde <__swbuf_r+0x2e>
 8005e2a:	e7d6      	b.n	8005dda <__swbuf_r+0x2a>

08005e2c <__swsetup_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ed4 <__swsetup_r+0xa8>)
 8005e30:	4605      	mov	r5, r0
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	460c      	mov	r4, r1
 8005e36:	b118      	cbz	r0, 8005e40 <__swsetup_r+0x14>
 8005e38:	6a03      	ldr	r3, [r0, #32]
 8005e3a:	b90b      	cbnz	r3, 8005e40 <__swsetup_r+0x14>
 8005e3c:	f7ff fa42 	bl	80052c4 <__sinit>
 8005e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e44:	0719      	lsls	r1, r3, #28
 8005e46:	d422      	bmi.n	8005e8e <__swsetup_r+0x62>
 8005e48:	06da      	lsls	r2, r3, #27
 8005e4a:	d407      	bmi.n	8005e5c <__swsetup_r+0x30>
 8005e4c:	2209      	movs	r2, #9
 8005e4e:	602a      	str	r2, [r5, #0]
 8005e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	e033      	b.n	8005ec4 <__swsetup_r+0x98>
 8005e5c:	0758      	lsls	r0, r3, #29
 8005e5e:	d512      	bpl.n	8005e86 <__swsetup_r+0x5a>
 8005e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e62:	b141      	cbz	r1, 8005e76 <__swsetup_r+0x4a>
 8005e64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	d002      	beq.n	8005e72 <__swsetup_r+0x46>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f7ff fb31 	bl	80054d4 <_free_r>
 8005e72:	2300      	movs	r3, #0
 8005e74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6063      	str	r3, [r4, #4]
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	f043 0308 	orr.w	r3, r3, #8
 8005e8c:	81a3      	strh	r3, [r4, #12]
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	b94b      	cbnz	r3, 8005ea6 <__swsetup_r+0x7a>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e9c:	d003      	beq.n	8005ea6 <__swsetup_r+0x7a>
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f85c 	bl	8005f5e <__smakebuf_r>
 8005ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eaa:	f013 0201 	ands.w	r2, r3, #1
 8005eae:	d00a      	beq.n	8005ec6 <__swsetup_r+0x9a>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	60a2      	str	r2, [r4, #8]
 8005eb4:	6962      	ldr	r2, [r4, #20]
 8005eb6:	4252      	negs	r2, r2
 8005eb8:	61a2      	str	r2, [r4, #24]
 8005eba:	6922      	ldr	r2, [r4, #16]
 8005ebc:	b942      	cbnz	r2, 8005ed0 <__swsetup_r+0xa4>
 8005ebe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ec2:	d1c5      	bne.n	8005e50 <__swsetup_r+0x24>
 8005ec4:	bd38      	pop	{r3, r4, r5, pc}
 8005ec6:	0799      	lsls	r1, r3, #30
 8005ec8:	bf58      	it	pl
 8005eca:	6962      	ldrpl	r2, [r4, #20]
 8005ecc:	60a2      	str	r2, [r4, #8]
 8005ece:	e7f4      	b.n	8005eba <__swsetup_r+0x8e>
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	e7f7      	b.n	8005ec4 <__swsetup_r+0x98>
 8005ed4:	2000001c 	.word	0x2000001c

08005ed8 <_sbrk_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	2300      	movs	r3, #0
 8005edc:	4d05      	ldr	r5, [pc, #20]	@ (8005ef4 <_sbrk_r+0x1c>)
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fb fd3e 	bl	8001964 <_sbrk>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_sbrk_r+0x1a>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_sbrk_r+0x1a>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20000304 	.word	0x20000304

08005ef8 <memchr>:
 8005ef8:	4603      	mov	r3, r0
 8005efa:	b510      	push	{r4, lr}
 8005efc:	b2c9      	uxtb	r1, r1
 8005efe:	4402      	add	r2, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	d101      	bne.n	8005f0a <memchr+0x12>
 8005f06:	2000      	movs	r0, #0
 8005f08:	e003      	b.n	8005f12 <memchr+0x1a>
 8005f0a:	7804      	ldrb	r4, [r0, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	428c      	cmp	r4, r1
 8005f10:	d1f6      	bne.n	8005f00 <memchr+0x8>
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <__swhatbuf_r>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	2900      	cmp	r1, #0
 8005f20:	461e      	mov	r6, r3
 8005f22:	b096      	sub	sp, #88	@ 0x58
 8005f24:	da0c      	bge.n	8005f40 <__swhatbuf_r+0x2c>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f2e:	bf14      	ite	ne
 8005f30:	2340      	movne	r3, #64	@ 0x40
 8005f32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f36:	2000      	movs	r0, #0
 8005f38:	6031      	str	r1, [r6, #0]
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	b016      	add	sp, #88	@ 0x58
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	466a      	mov	r2, sp
 8005f42:	f000 f849 	bl	8005fd8 <_fstat_r>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	dbed      	blt.n	8005f26 <__swhatbuf_r+0x12>
 8005f4a:	9901      	ldr	r1, [sp, #4]
 8005f4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f54:	4259      	negs	r1, r3
 8005f56:	4159      	adcs	r1, r3
 8005f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f5c:	e7eb      	b.n	8005f36 <__swhatbuf_r+0x22>

08005f5e <__smakebuf_r>:
 8005f5e:	898b      	ldrh	r3, [r1, #12]
 8005f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f62:	079d      	lsls	r5, r3, #30
 8005f64:	4606      	mov	r6, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	d507      	bpl.n	8005f7a <__smakebuf_r+0x1c>
 8005f6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	6123      	str	r3, [r4, #16]
 8005f72:	2301      	movs	r3, #1
 8005f74:	6163      	str	r3, [r4, #20]
 8005f76:	b003      	add	sp, #12
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	466a      	mov	r2, sp
 8005f7c:	ab01      	add	r3, sp, #4
 8005f7e:	f7ff ffc9 	bl	8005f14 <__swhatbuf_r>
 8005f82:	9f00      	ldr	r7, [sp, #0]
 8005f84:	4605      	mov	r5, r0
 8005f86:	4639      	mov	r1, r7
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f7ff fb0d 	bl	80055a8 <_malloc_r>
 8005f8e:	b948      	cbnz	r0, 8005fa4 <__smakebuf_r+0x46>
 8005f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f94:	059a      	lsls	r2, r3, #22
 8005f96:	d4ee      	bmi.n	8005f76 <__smakebuf_r+0x18>
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	e7e2      	b.n	8005f6a <__smakebuf_r+0xc>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	9b01      	ldr	r3, [sp, #4]
 8005fb2:	6020      	str	r0, [r4, #0]
 8005fb4:	b15b      	cbz	r3, 8005fce <__smakebuf_r+0x70>
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fbc:	f000 f81e 	bl	8005ffc <_isatty_r>
 8005fc0:	b128      	cbz	r0, 8005fce <__smakebuf_r+0x70>
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f023 0303 	bic.w	r3, r3, #3
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	431d      	orrs	r5, r3
 8005fd2:	81a5      	strh	r5, [r4, #12]
 8005fd4:	e7cf      	b.n	8005f76 <__smakebuf_r+0x18>
	...

08005fd8 <_fstat_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	2300      	movs	r3, #0
 8005fdc:	4d06      	ldr	r5, [pc, #24]	@ (8005ff8 <_fstat_r+0x20>)
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	602b      	str	r3, [r5, #0]
 8005fe6:	f7fb fc97 	bl	8001918 <_fstat>
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	d102      	bne.n	8005ff4 <_fstat_r+0x1c>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	b103      	cbz	r3, 8005ff4 <_fstat_r+0x1c>
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000304 	.word	0x20000304

08005ffc <_isatty_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	2300      	movs	r3, #0
 8006000:	4d05      	ldr	r5, [pc, #20]	@ (8006018 <_isatty_r+0x1c>)
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	f7fb fc95 	bl	8001936 <_isatty>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_isatty_r+0x1a>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_isatty_r+0x1a>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20000304 	.word	0x20000304

0800601c <atan2f>:
 800601c:	f000 b844 	b.w	80060a8 <__ieee754_atan2f>

08006020 <fmaxf>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4604      	mov	r4, r0
 8006024:	460d      	mov	r5, r1
 8006026:	f000 f825 	bl	8006074 <__fpclassifyf>
 800602a:	b910      	cbnz	r0, 8006032 <fmaxf+0x12>
 800602c:	462c      	mov	r4, r5
 800602e:	4620      	mov	r0, r4
 8006030:	bd38      	pop	{r3, r4, r5, pc}
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f81e 	bl	8006074 <__fpclassifyf>
 8006038:	2800      	cmp	r0, #0
 800603a:	d0f8      	beq.n	800602e <fmaxf+0xe>
 800603c:	4629      	mov	r1, r5
 800603e:	4620      	mov	r0, r4
 8006040:	f7fa fb4e 	bl	80006e0 <__aeabi_fcmpgt>
 8006044:	2800      	cmp	r0, #0
 8006046:	d0f1      	beq.n	800602c <fmaxf+0xc>
 8006048:	e7f1      	b.n	800602e <fmaxf+0xe>

0800604a <fminf>:
 800604a:	b538      	push	{r3, r4, r5, lr}
 800604c:	4604      	mov	r4, r0
 800604e:	460d      	mov	r5, r1
 8006050:	f000 f810 	bl	8006074 <__fpclassifyf>
 8006054:	b910      	cbnz	r0, 800605c <fminf+0x12>
 8006056:	462c      	mov	r4, r5
 8006058:	4620      	mov	r0, r4
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	4628      	mov	r0, r5
 800605e:	f000 f809 	bl	8006074 <__fpclassifyf>
 8006062:	2800      	cmp	r0, #0
 8006064:	d0f8      	beq.n	8006058 <fminf+0xe>
 8006066:	4629      	mov	r1, r5
 8006068:	4620      	mov	r0, r4
 800606a:	f7fa fb1b 	bl	80006a4 <__aeabi_fcmplt>
 800606e:	2800      	cmp	r0, #0
 8006070:	d0f1      	beq.n	8006056 <fminf+0xc>
 8006072:	e7f1      	b.n	8006058 <fminf+0xe>

08006074 <__fpclassifyf>:
 8006074:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8006078:	d00d      	beq.n	8006096 <__fpclassifyf+0x22>
 800607a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800607e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006082:	d30a      	bcc.n	800609a <__fpclassifyf+0x26>
 8006084:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <__fpclassifyf+0x30>)
 8006086:	1e42      	subs	r2, r0, #1
 8006088:	429a      	cmp	r2, r3
 800608a:	d908      	bls.n	800609e <__fpclassifyf+0x2a>
 800608c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8006090:	4258      	negs	r0, r3
 8006092:	4158      	adcs	r0, r3
 8006094:	4770      	bx	lr
 8006096:	2002      	movs	r0, #2
 8006098:	4770      	bx	lr
 800609a:	2004      	movs	r0, #4
 800609c:	4770      	bx	lr
 800609e:	2003      	movs	r0, #3
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	007ffffe 	.word	0x007ffffe

080060a8 <__ieee754_atan2f>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80060ae:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80060b2:	4603      	mov	r3, r0
 80060b4:	d805      	bhi.n	80060c2 <__ieee754_atan2f+0x1a>
 80060b6:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80060ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80060be:	4607      	mov	r7, r0
 80060c0:	d904      	bls.n	80060cc <__ieee754_atan2f+0x24>
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa f848 	bl	8000158 <__addsf3>
 80060c8:	4603      	mov	r3, r0
 80060ca:	e010      	b.n	80060ee <__ieee754_atan2f+0x46>
 80060cc:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80060d0:	d103      	bne.n	80060da <__ieee754_atan2f+0x32>
 80060d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060d6:	f000 b86f 	b.w	80061b8 <atanf>
 80060da:	178c      	asrs	r4, r1, #30
 80060dc:	f004 0402 	and.w	r4, r4, #2
 80060e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80060e4:	b92a      	cbnz	r2, 80060f2 <__ieee754_atan2f+0x4a>
 80060e6:	2c02      	cmp	r4, #2
 80060e8:	d04b      	beq.n	8006182 <__ieee754_atan2f+0xda>
 80060ea:	2c03      	cmp	r4, #3
 80060ec:	d04b      	beq.n	8006186 <__ieee754_atan2f+0xde>
 80060ee:	4618      	mov	r0, r3
 80060f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f2:	b91e      	cbnz	r6, 80060fc <__ieee754_atan2f+0x54>
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	db4c      	blt.n	8006192 <__ieee754_atan2f+0xea>
 80060f8:	4b27      	ldr	r3, [pc, #156]	@ (8006198 <__ieee754_atan2f+0xf0>)
 80060fa:	e7f8      	b.n	80060ee <__ieee754_atan2f+0x46>
 80060fc:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8006100:	d10e      	bne.n	8006120 <__ieee754_atan2f+0x78>
 8006102:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006106:	f104 34ff 	add.w	r4, r4, #4294967295
 800610a:	d105      	bne.n	8006118 <__ieee754_atan2f+0x70>
 800610c:	2c02      	cmp	r4, #2
 800610e:	d83c      	bhi.n	800618a <__ieee754_atan2f+0xe2>
 8006110:	4b22      	ldr	r3, [pc, #136]	@ (800619c <__ieee754_atan2f+0xf4>)
 8006112:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006116:	e7ea      	b.n	80060ee <__ieee754_atan2f+0x46>
 8006118:	2c02      	cmp	r4, #2
 800611a:	d838      	bhi.n	800618e <__ieee754_atan2f+0xe6>
 800611c:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <__ieee754_atan2f+0xf8>)
 800611e:	e7f8      	b.n	8006112 <__ieee754_atan2f+0x6a>
 8006120:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006124:	d0e6      	beq.n	80060f4 <__ieee754_atan2f+0x4c>
 8006126:	1b92      	subs	r2, r2, r6
 8006128:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800612c:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8006130:	da17      	bge.n	8006162 <__ieee754_atan2f+0xba>
 8006132:	2900      	cmp	r1, #0
 8006134:	da01      	bge.n	800613a <__ieee754_atan2f+0x92>
 8006136:	303c      	adds	r0, #60	@ 0x3c
 8006138:	db15      	blt.n	8006166 <__ieee754_atan2f+0xbe>
 800613a:	4618      	mov	r0, r3
 800613c:	f7fa f9c8 	bl	80004d0 <__aeabi_fdiv>
 8006140:	f000 f946 	bl	80063d0 <fabsf>
 8006144:	f000 f838 	bl	80061b8 <atanf>
 8006148:	4603      	mov	r3, r0
 800614a:	2c01      	cmp	r4, #1
 800614c:	d00d      	beq.n	800616a <__ieee754_atan2f+0xc2>
 800614e:	2c02      	cmp	r4, #2
 8006150:	d00e      	beq.n	8006170 <__ieee754_atan2f+0xc8>
 8006152:	2c00      	cmp	r4, #0
 8006154:	d0cb      	beq.n	80060ee <__ieee754_atan2f+0x46>
 8006156:	4913      	ldr	r1, [pc, #76]	@ (80061a4 <__ieee754_atan2f+0xfc>)
 8006158:	4618      	mov	r0, r3
 800615a:	f7f9 fffd 	bl	8000158 <__addsf3>
 800615e:	4912      	ldr	r1, [pc, #72]	@ (80061a8 <__ieee754_atan2f+0x100>)
 8006160:	e00c      	b.n	800617c <__ieee754_atan2f+0xd4>
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <__ieee754_atan2f+0xf0>)
 8006164:	e7f1      	b.n	800614a <__ieee754_atan2f+0xa2>
 8006166:	2300      	movs	r3, #0
 8006168:	e7ef      	b.n	800614a <__ieee754_atan2f+0xa2>
 800616a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800616e:	e7be      	b.n	80060ee <__ieee754_atan2f+0x46>
 8006170:	490c      	ldr	r1, [pc, #48]	@ (80061a4 <__ieee754_atan2f+0xfc>)
 8006172:	4618      	mov	r0, r3
 8006174:	f7f9 fff0 	bl	8000158 <__addsf3>
 8006178:	4601      	mov	r1, r0
 800617a:	480b      	ldr	r0, [pc, #44]	@ (80061a8 <__ieee754_atan2f+0x100>)
 800617c:	f7f9 ffea 	bl	8000154 <__aeabi_fsub>
 8006180:	e7a2      	b.n	80060c8 <__ieee754_atan2f+0x20>
 8006182:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <__ieee754_atan2f+0x100>)
 8006184:	e7b3      	b.n	80060ee <__ieee754_atan2f+0x46>
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <__ieee754_atan2f+0x104>)
 8006188:	e7b1      	b.n	80060ee <__ieee754_atan2f+0x46>
 800618a:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <__ieee754_atan2f+0x108>)
 800618c:	e7af      	b.n	80060ee <__ieee754_atan2f+0x46>
 800618e:	2300      	movs	r3, #0
 8006190:	e7ad      	b.n	80060ee <__ieee754_atan2f+0x46>
 8006192:	4b08      	ldr	r3, [pc, #32]	@ (80061b4 <__ieee754_atan2f+0x10c>)
 8006194:	e7ab      	b.n	80060ee <__ieee754_atan2f+0x46>
 8006196:	bf00      	nop
 8006198:	3fc90fdb 	.word	0x3fc90fdb
 800619c:	0800646c 	.word	0x0800646c
 80061a0:	08006460 	.word	0x08006460
 80061a4:	33bbbd2e 	.word	0x33bbbd2e
 80061a8:	40490fdb 	.word	0x40490fdb
 80061ac:	c0490fdb 	.word	0xc0490fdb
 80061b0:	3f490fdb 	.word	0x3f490fdb
 80061b4:	bfc90fdb 	.word	0xbfc90fdb

080061b8 <atanf>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80061c0:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 80061c4:	4604      	mov	r4, r0
 80061c6:	4680      	mov	r8, r0
 80061c8:	d30e      	bcc.n	80061e8 <atanf+0x30>
 80061ca:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80061ce:	d904      	bls.n	80061da <atanf+0x22>
 80061d0:	4601      	mov	r1, r0
 80061d2:	f7f9 ffc1 	bl	8000158 <__addsf3>
 80061d6:	4604      	mov	r4, r0
 80061d8:	e003      	b.n	80061e2 <atanf+0x2a>
 80061da:	2800      	cmp	r0, #0
 80061dc:	f340 80ce 	ble.w	800637c <atanf+0x1c4>
 80061e0:	4c67      	ldr	r4, [pc, #412]	@ (8006380 <atanf+0x1c8>)
 80061e2:	4620      	mov	r0, r4
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	4b66      	ldr	r3, [pc, #408]	@ (8006384 <atanf+0x1cc>)
 80061ea:	429d      	cmp	r5, r3
 80061ec:	d80e      	bhi.n	800620c <atanf+0x54>
 80061ee:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 80061f2:	d208      	bcs.n	8006206 <atanf+0x4e>
 80061f4:	4964      	ldr	r1, [pc, #400]	@ (8006388 <atanf+0x1d0>)
 80061f6:	f7f9 ffaf 	bl	8000158 <__addsf3>
 80061fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80061fe:	f7fa fa6f 	bl	80006e0 <__aeabi_fcmpgt>
 8006202:	2800      	cmp	r0, #0
 8006204:	d1ed      	bne.n	80061e2 <atanf+0x2a>
 8006206:	f04f 36ff 	mov.w	r6, #4294967295
 800620a:	e01c      	b.n	8006246 <atanf+0x8e>
 800620c:	f000 f8e0 	bl	80063d0 <fabsf>
 8006210:	4b5e      	ldr	r3, [pc, #376]	@ (800638c <atanf+0x1d4>)
 8006212:	4604      	mov	r4, r0
 8006214:	429d      	cmp	r5, r3
 8006216:	d87c      	bhi.n	8006312 <atanf+0x15a>
 8006218:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800621c:	429d      	cmp	r5, r3
 800621e:	d867      	bhi.n	80062f0 <atanf+0x138>
 8006220:	4601      	mov	r1, r0
 8006222:	f7f9 ff99 	bl	8000158 <__addsf3>
 8006226:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800622a:	f7f9 ff93 	bl	8000154 <__aeabi_fsub>
 800622e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006232:	4605      	mov	r5, r0
 8006234:	4620      	mov	r0, r4
 8006236:	f7f9 ff8f 	bl	8000158 <__addsf3>
 800623a:	4601      	mov	r1, r0
 800623c:	4628      	mov	r0, r5
 800623e:	f7fa f947 	bl	80004d0 <__aeabi_fdiv>
 8006242:	2600      	movs	r6, #0
 8006244:	4604      	mov	r4, r0
 8006246:	4621      	mov	r1, r4
 8006248:	4620      	mov	r0, r4
 800624a:	f7fa f88d 	bl	8000368 <__aeabi_fmul>
 800624e:	4601      	mov	r1, r0
 8006250:	4607      	mov	r7, r0
 8006252:	f7fa f889 	bl	8000368 <__aeabi_fmul>
 8006256:	4605      	mov	r5, r0
 8006258:	494d      	ldr	r1, [pc, #308]	@ (8006390 <atanf+0x1d8>)
 800625a:	f7fa f885 	bl	8000368 <__aeabi_fmul>
 800625e:	494d      	ldr	r1, [pc, #308]	@ (8006394 <atanf+0x1dc>)
 8006260:	f7f9 ff7a 	bl	8000158 <__addsf3>
 8006264:	4629      	mov	r1, r5
 8006266:	f7fa f87f 	bl	8000368 <__aeabi_fmul>
 800626a:	494b      	ldr	r1, [pc, #300]	@ (8006398 <atanf+0x1e0>)
 800626c:	f7f9 ff74 	bl	8000158 <__addsf3>
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa f879 	bl	8000368 <__aeabi_fmul>
 8006276:	4949      	ldr	r1, [pc, #292]	@ (800639c <atanf+0x1e4>)
 8006278:	f7f9 ff6e 	bl	8000158 <__addsf3>
 800627c:	4629      	mov	r1, r5
 800627e:	f7fa f873 	bl	8000368 <__aeabi_fmul>
 8006282:	4947      	ldr	r1, [pc, #284]	@ (80063a0 <atanf+0x1e8>)
 8006284:	f7f9 ff68 	bl	8000158 <__addsf3>
 8006288:	4629      	mov	r1, r5
 800628a:	f7fa f86d 	bl	8000368 <__aeabi_fmul>
 800628e:	4945      	ldr	r1, [pc, #276]	@ (80063a4 <atanf+0x1ec>)
 8006290:	f7f9 ff62 	bl	8000158 <__addsf3>
 8006294:	4639      	mov	r1, r7
 8006296:	f7fa f867 	bl	8000368 <__aeabi_fmul>
 800629a:	4943      	ldr	r1, [pc, #268]	@ (80063a8 <atanf+0x1f0>)
 800629c:	4607      	mov	r7, r0
 800629e:	4628      	mov	r0, r5
 80062a0:	f7fa f862 	bl	8000368 <__aeabi_fmul>
 80062a4:	4941      	ldr	r1, [pc, #260]	@ (80063ac <atanf+0x1f4>)
 80062a6:	f7f9 ff55 	bl	8000154 <__aeabi_fsub>
 80062aa:	4629      	mov	r1, r5
 80062ac:	f7fa f85c 	bl	8000368 <__aeabi_fmul>
 80062b0:	493f      	ldr	r1, [pc, #252]	@ (80063b0 <atanf+0x1f8>)
 80062b2:	f7f9 ff4f 	bl	8000154 <__aeabi_fsub>
 80062b6:	4629      	mov	r1, r5
 80062b8:	f7fa f856 	bl	8000368 <__aeabi_fmul>
 80062bc:	493d      	ldr	r1, [pc, #244]	@ (80063b4 <atanf+0x1fc>)
 80062be:	f7f9 ff49 	bl	8000154 <__aeabi_fsub>
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7fa f850 	bl	8000368 <__aeabi_fmul>
 80062c8:	493b      	ldr	r1, [pc, #236]	@ (80063b8 <atanf+0x200>)
 80062ca:	f7f9 ff43 	bl	8000154 <__aeabi_fsub>
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7fa f84a 	bl	8000368 <__aeabi_fmul>
 80062d4:	4601      	mov	r1, r0
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7f9 ff3e 	bl	8000158 <__addsf3>
 80062dc:	4621      	mov	r1, r4
 80062de:	f7fa f843 	bl	8000368 <__aeabi_fmul>
 80062e2:	1c73      	adds	r3, r6, #1
 80062e4:	4601      	mov	r1, r0
 80062e6:	d133      	bne.n	8006350 <atanf+0x198>
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7f9 ff33 	bl	8000154 <__aeabi_fsub>
 80062ee:	e772      	b.n	80061d6 <atanf+0x1e>
 80062f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80062f4:	f7f9 ff2e 	bl	8000154 <__aeabi_fsub>
 80062f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80062fc:	4605      	mov	r5, r0
 80062fe:	4620      	mov	r0, r4
 8006300:	f7f9 ff2a 	bl	8000158 <__addsf3>
 8006304:	4601      	mov	r1, r0
 8006306:	4628      	mov	r0, r5
 8006308:	f7fa f8e2 	bl	80004d0 <__aeabi_fdiv>
 800630c:	2601      	movs	r6, #1
 800630e:	4604      	mov	r4, r0
 8006310:	e799      	b.n	8006246 <atanf+0x8e>
 8006312:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <atanf+0x204>)
 8006314:	429d      	cmp	r5, r3
 8006316:	d814      	bhi.n	8006342 <atanf+0x18a>
 8006318:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800631c:	f7f9 ff1a 	bl	8000154 <__aeabi_fsub>
 8006320:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8006324:	4605      	mov	r5, r0
 8006326:	4620      	mov	r0, r4
 8006328:	f7fa f81e 	bl	8000368 <__aeabi_fmul>
 800632c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006330:	f7f9 ff12 	bl	8000158 <__addsf3>
 8006334:	4601      	mov	r1, r0
 8006336:	4628      	mov	r0, r5
 8006338:	f7fa f8ca 	bl	80004d0 <__aeabi_fdiv>
 800633c:	2602      	movs	r6, #2
 800633e:	4604      	mov	r4, r0
 8006340:	e781      	b.n	8006246 <atanf+0x8e>
 8006342:	4601      	mov	r1, r0
 8006344:	481e      	ldr	r0, [pc, #120]	@ (80063c0 <atanf+0x208>)
 8006346:	f7fa f8c3 	bl	80004d0 <__aeabi_fdiv>
 800634a:	2603      	movs	r6, #3
 800634c:	4604      	mov	r4, r0
 800634e:	e77a      	b.n	8006246 <atanf+0x8e>
 8006350:	4b1c      	ldr	r3, [pc, #112]	@ (80063c4 <atanf+0x20c>)
 8006352:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8006356:	f7f9 fefd 	bl	8000154 <__aeabi_fsub>
 800635a:	4621      	mov	r1, r4
 800635c:	f7f9 fefa 	bl	8000154 <__aeabi_fsub>
 8006360:	4b19      	ldr	r3, [pc, #100]	@ (80063c8 <atanf+0x210>)
 8006362:	4601      	mov	r1, r0
 8006364:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006368:	f7f9 fef4 	bl	8000154 <__aeabi_fsub>
 800636c:	f1b8 0f00 	cmp.w	r8, #0
 8006370:	4604      	mov	r4, r0
 8006372:	f6bf af36 	bge.w	80061e2 <atanf+0x2a>
 8006376:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800637a:	e732      	b.n	80061e2 <atanf+0x2a>
 800637c:	4c13      	ldr	r4, [pc, #76]	@ (80063cc <atanf+0x214>)
 800637e:	e730      	b.n	80061e2 <atanf+0x2a>
 8006380:	3fc90fdb 	.word	0x3fc90fdb
 8006384:	3edfffff 	.word	0x3edfffff
 8006388:	7149f2ca 	.word	0x7149f2ca
 800638c:	3f97ffff 	.word	0x3f97ffff
 8006390:	3c8569d7 	.word	0x3c8569d7
 8006394:	3d4bda59 	.word	0x3d4bda59
 8006398:	3d886b35 	.word	0x3d886b35
 800639c:	3dba2e6e 	.word	0x3dba2e6e
 80063a0:	3e124925 	.word	0x3e124925
 80063a4:	3eaaaaab 	.word	0x3eaaaaab
 80063a8:	bd15a221 	.word	0xbd15a221
 80063ac:	3d6ef16b 	.word	0x3d6ef16b
 80063b0:	3d9d8795 	.word	0x3d9d8795
 80063b4:	3de38e38 	.word	0x3de38e38
 80063b8:	3e4ccccd 	.word	0x3e4ccccd
 80063bc:	401bffff 	.word	0x401bffff
 80063c0:	bf800000 	.word	0xbf800000
 80063c4:	08006478 	.word	0x08006478
 80063c8:	08006488 	.word	0x08006488
 80063cc:	bfc90fdb 	.word	0xbfc90fdb

080063d0 <fabsf>:
 80063d0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80063d4:	4770      	bx	lr
	...

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
